{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/renderer/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { autoDetectRenderer, ColorSource, Renderer as PixiRenderer } from 'pixi.js'\nimport { debugMode } from '../debug'\nimport { DirtyNumber } from '../node/core/dirty-number'\nimport { HasPixiContainer } from '../node/core/has-pixi-container'\nimport { PixiContainerNode } from '../node/core/pixi-container-node'\nimport { GlobalTransform } from '../node/core/transform'\nimport { isTransformableNode } from '../node/core/transformable-node'\nimport { Camera } from './camera'\nimport { RendererContainerManager } from './container-manager'\nimport { FpsDisplay } from './fps-display'\nimport { Layer } from './layer'\nimport { Ticker } from './ticker'\n\nexport type RendererOptions = {\n  logicalWidth?: number\n  logicalHeight?: number\n  backgroundColor?: ColorSource\n  layers?: { name: string; drawOrder: number }[]\n}\n\nexport class Renderer extends PixiContainerNode {\n  #containerManager: RendererContainerManager\n  #ticker = new Ticker((dt) => this.#render(dt))\n  camera = new Camera()\n  fpsDisplay?: FpsDisplay\n\n  #logicalWidth?: number\n  #logicalHeight?: number\n  #backgroundColor?: ColorSource\n\n  #pixiRenderer?: PixiRenderer\n  #layers: { [name: string]: Layer } = {}\n  _isSizeDirty = false\n\n  canvasWidth = 0\n  canvasHeight = 0\n  canvasLeft = 0\n  canvasTop = 0\n  viewportScale = 1\n  centerX = 0\n  centerY = 0\n\n  protected globalTransform = new GlobalTransform()\n  protected globalAlpha = new DirtyNumber(1)\n\n  constructor(public container: HTMLElement, options?: RendererOptions) {\n    super()\n    this.renderer = this\n    this.globalTransform.x.v = 0\n    this.globalTransform.y.v = 0\n    this.globalTransform.resetDirty()\n\n    this.#containerManager = new RendererContainerManager(container)\n    this.#containerManager.on('resize', (width, height) => this.#updateSize(width, height))\n\n    this.camera.on('positionChanged', () => this.#updatePosition())\n    this.camera.on('scaleChanged', () => this.#updatePosition())\n\n    if (options) {\n      if (options.logicalWidth !== undefined) this.#logicalWidth = options.logicalWidth\n      if (options.logicalHeight !== undefined) this.#logicalHeight = options.logicalHeight\n      if (options.backgroundColor !== undefined) this.#backgroundColor = options.backgroundColor\n\n      if (options.layers) {\n        for (const layerOption of options.layers) {\n          const layer = new Layer(layerOption.drawOrder)\n          this._pixiContainer.addChild(layer._pixiContainer)\n          this.#layers[layerOption.name] = layer\n        }\n      }\n    }\n\n    if (debugMode) {\n      this.fpsDisplay = new FpsDisplay(container)\n    }\n\n    const cr = this.container.getBoundingClientRect()\n    this.#updateSize(cr.width, cr.height)\n    this.init()\n  }\n\n  private async init() {\n    const pr = await autoDetectRenderer({\n      width: this.#logicalWidth,\n      height: this.#logicalHeight,\n      backgroundColor: this.#backgroundColor,\n      eventMode: 'none',\n      resolution: window.devicePixelRatio,\n    })\n\n    const canvas = pr.canvas\n    canvas.style.position = 'absolute'\n    canvas.style.touchAction = 'auto'\n    this.container.appendChild(canvas)\n\n    this.#pixiRenderer = pr\n  }\n\n  #updatePosition() {\n    const S = this.camera.scale\n    this._pixiContainer.scale = S\n    this._pixiContainer.position.set(\n      this.centerX - this.camera.x * S,\n      this.centerY - this.camera.y * S\n    )\n  }\n\n  #updateSize(containerWidth: number, containerHeight: number) {\n    const canvasWidth = this.#logicalWidth ?? containerWidth\n    const canvasHeight = this.#logicalHeight ?? containerHeight\n    this.canvasWidth = canvasWidth\n    this.canvasHeight = canvasHeight\n\n    this.centerX = canvasWidth / 2\n    this.centerY = canvasHeight / 2\n    this.#updatePosition()\n\n    const S = Math.min(containerWidth / canvasWidth, containerHeight / canvasHeight)\n    this.viewportScale = S\n\n    const displayWidth = canvasWidth * S\n    const displayHeight = canvasHeight * S\n\n    const canvasLeft = (containerWidth - displayWidth) / 2\n    const canvasTop = (containerHeight - displayHeight) / 2\n    this.canvasLeft = canvasLeft\n    this.canvasTop = canvasTop\n\n    if (this.#pixiRenderer) {\n      this.#pixiRenderer.resize(canvasWidth, canvasHeight)\n\n      const canvas = this.#pixiRenderer.canvas\n      canvas.style.width = `${displayWidth}px`\n      canvas.style.height = `${displayHeight}px`\n      canvas.style.left = `${canvasLeft}px`\n      canvas.style.top = `${canvasTop}px`\n    }\n\n    this._isSizeDirty = true\n  }\n\n  #render(dt: number) {\n    this.update(dt)\n    for (const child of this.children) {\n      if (isTransformableNode(child)) child._resetTransformDirty()\n    }\n    this._isSizeDirty = false\n    this.#pixiRenderer?.render(this._pixiContainer)\n    this.fpsDisplay?.update()\n  }\n\n  _addToLayer(node: HasPixiContainer, layerName: string) {\n    const layer = this.#layers[layerName]\n    if (!layer) throw new Error(`Layer ${layerName} does not exist.`)\n    layer._pixiContainer.addChild(node._pixiContainer)\n  }\n\n  override remove() {\n    this.#containerManager.remove()\n    this.#ticker.remove()\n    this.#pixiRenderer?.destroy()\n    this.fpsDisplay?.remove()\n    super.remove()\n  }\n}\n"]}