{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/renderer/renderer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAA;AAM/B,MAAM,OAAO,QAAQ;IAGA;IAFnB,OAAO,GAA8B,EAAE,CAAC;IAExC,YAAmB,MAAmB,EAAE,OAAyB;QAA9C,WAAM,GAAN,MAAM,CAAa;QACpC,IAAI,OAAO,EAAE,MAAM,EAAE,CAAC;YACpB,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA;YACvD,CAAC;QACH,CAAC;IACH,CAAC;IAED,UAAU,CAAC,IAAc,EAAE,SAAiB;QAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACrC,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,SAAS,SAAS,kBAAkB,CAAC,CAAA;QACjE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACjB,CAAC;CACF","sourcesContent":["import { GameNode } from '../node/core/game-node'\nimport { Layer } from './layer'\n\nexport type RendererOptions = {\n  layers?: { name: string; drawOrder: number }[]\n}\n\nexport class Renderer {\n  #layers: { [name: string]: Layer } = {};\n\n  constructor(public target: HTMLElement, options?: RendererOptions) {\n    if (options?.layers) {\n      for (const layer of options.layers) {\n        this.#layers[layer.name] = new Layer(layer.drawOrder)\n      }\n    }\n  }\n\n  addToLayer(node: GameNode, layerName: string) {\n    const layer = this.#layers[layerName]\n    if (!layer) throw new Error(`Layer ${layerName} does not exist.`)\n    layer.add(node)\n  }\n}\n"]}