{"version":3,"file":"container-manager.js","sourceRoot":"","sources":["../../src/renderer/container-manager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAA;AACrD,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAA;AAEvD,MAAM,OAAO,wBAAyB,SAAQ,YAE5C;IACA,UAAU,CAAa;IACvB,wBAAwB,CAAgB;IACxC,eAAe,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAA;IACpC,gBAAgB,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAA;IAErC,YAAY,SAAsB;QAChC,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,UAAU,GAAG,SAAS,CAAA;QAC3B,IAAI,CAAC,wBAAwB,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACnF,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAClD,CAAC;IAED,eAAe;QACb,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAA;QAClD,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,CAAA;QACjC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAA;QAEnC,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAC9D,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAA;YAEpE,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,CAAA;YACjC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;QACpC,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,CAAA;QAC1C,KAAK,CAAC,MAAM,EAAE,CAAA;IAChB,CAAC;CACF","sourcesContent":["import { EventEmitter } from '@webtaku/event-emitter'\nimport { DirtyNumber } from '../node/core/dirty-number'\n\nexport class RendererContainerManager extends EventEmitter<{\n  resize: (width: number, height: number) => void\n}> {\n  #container: HTMLElement\n  #containerResizeObserver: ResizeObserver\n  #containerWidth = new DirtyNumber(0)\n  #containerHeight = new DirtyNumber(0)\n\n  constructor(container: HTMLElement) {\n    super()\n    this.#container = container\n    this.#containerResizeObserver = new ResizeObserver(this.#resizeListener.bind(this))\n    this.#containerResizeObserver.observe(container)\n  }\n\n  #resizeListener() {\n    const cr = this.#container.getBoundingClientRect()\n    this.#containerWidth.v = cr.width\n    this.#containerHeight.v = cr.height\n\n    if (this.#containerWidth.dirty || this.#containerHeight.dirty) {\n      this.emit('resize', this.#containerWidth.v, this.#containerHeight.v)\n\n      this.#containerWidth.resetDirty()\n      this.#containerHeight.resetDirty()\n    }\n  }\n\n  override remove() {\n    this.#containerResizeObserver.disconnect()\n    super.remove()\n  }\n}\n"]}