import { EventEmitter, EventMap } from '@webtaku/event-emitter';
import { Container } from 'pixi.js';
import { World } from '../world/world';
import { Collider } from './game-object-physics';
import { GameObjectRendering } from './game-object-rendering';
import { LocalTransform, WorldTransform } from './transform';
export declare class GameObject<E extends EventMap = EventMap> extends EventEmitter<E & {
    update: (dt: number) => void;
}> {
    #private;
    _lt: LocalTransform;
    _wt: WorldTransform;
    _rendering: GameObjectRendering;
    data: Record<string, any>;
    protected _setWorld(world: World): void;
    _getWorld(): World | undefined;
    add(...children: GameObject[]): void;
    remove(): void;
    protected update(dt: number): void;
    protected _afterRender(): void;
    _engineUpdate(dt: number, pt: WorldTransform): void;
    constructor(opts?: GameObjectOptions);
    get x(): number;
    set x(v: number);
    get y(): number;
    set y(v: number);
    get pivotX(): number;
    set pivotX(v: number);
    get pivotY(): number;
    set pivotY(v: number);
    get scale(): number;
    set scale(v: number);
    get scaleX(): number;
    set scaleX(v: number);
    get scaleY(): number;
    set scaleY(v: number);
    get rotation(): number;
    set rotation(v: number);
    get alpha(): number;
    set alpha(v: number);
    get drawOrder(): number;
    set drawOrder(v: number);
    get yBasedDrawOrder(): boolean;
    set yBasedDrawOrder(v: boolean);
    get collider(): Collider | undefined;
    set collider(v: Collider | undefined);
    get isStatic(): boolean;
    set isStatic(v: boolean);
    get isSensor(): boolean;
    set isSensor(v: boolean);
    get velocityX(): number;
    set velocityX(v: number);
    get velocityY(): number;
    set velocityY(v: number);
    get fixedRotation(): boolean;
    set fixedRotation(v: boolean);
    _addPixiChild(child: Container): void;
    get image(): string | undefined;
    set image(value: string | undefined);
}
export type GameObjectOptions = {
    x?: number;
    y?: number;
    pivotX?: number;
    pivotY?: number;
    scale?: number;
    scaleX?: number;
    scaleY?: number;
    rotation?: number;
    alpha?: number;
    drawOrder?: number;
    yBasedDrawOrder?: boolean;
    collider?: Collider;
    isStatic?: boolean;
    isSensor?: boolean;
    velocityX?: number;
    velocityY?: number;
    fixedRotation?: boolean;
    image?: string;
};
//# sourceMappingURL=game-object.d.ts.map