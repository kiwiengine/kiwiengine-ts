{"version":3,"file":"dom-texture.js","sourceRoot":"","sources":["../../../src/dom/loaders/dom-texture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,4BAA4B,CAAC;AAEpD,MAAM,gBAAiB,SAAQ,MAAwB;IAClC,KAAK,CAAC,KAAK,CAAC,GAAW;QACxC,MAAM,cAAc,GAAG,IAAI,OAAO,CAA+B,CAAC,OAAO,EAAE,EAAE;YAC3E,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;YAC1B,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAChC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;YAEhB,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;gBAClB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC5B,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnB,OAAO;gBACT,CAAC;gBAED,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAC;oBAChD,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnB,OAAO;gBACT,CAAC;gBAED,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBAClC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjB,CAAC,CAAC;YAEF,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACjC,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;gBACvD,OAAO,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,MAAM,cAAc,CAAC;IAC9B,CAAC;IAEkB,QAAQ,CAAC,GAAW,EAAE,OAAyB;QAChE,OAAO,CAAC,MAAM,EAAE,CAAC;IACnB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAC","sourcesContent":["import { Loader } from \"../../asset/loaders/loader\";\n\nclass DomTextureLoader extends Loader<HTMLImageElement> {\n  protected override async _load(src: string) {\n    const loadingPromise = new Promise<HTMLImageElement | undefined>((resolve) => {\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.src = src;\n\n      image.onload = () => {\n        this.loadingPromises.delete(src);\n\n        if (!this.hasActiveRef(src)) {\n          resolve(undefined);\n          return;\n        }\n\n        if (this.loadedAssets.has(src)) {\n          console.error(`Texture already loaded: ${src}`);\n          resolve(undefined);\n          return;\n        }\n\n        this.loadedAssets.set(src, image);\n        resolve(image);\n      };\n\n      image.onerror = (error) => {\n        this.loadingPromises.delete(src);\n        console.error(`Failed to load texture: ${src}`, error);\n        resolve(undefined);\n      };\n    });\n\n    this.loadingPromises.set(src, loadingPromise);\n    return await loadingPromise;\n  }\n\n  protected override _dispose(src: string, texture: HTMLImageElement) {\n    texture.remove();\n  }\n}\n\nexport const domTextureLoader = new DomTextureLoader();\n"]}