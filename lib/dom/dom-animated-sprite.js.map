{"version":3,"file":"dom-animated-sprite.js","sourceRoot":"","sources":["../../src/dom/dom-animated-sprite.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { SpritesheetData } from 'pixi.js'\nimport { DomGameObject, DomGameObjectOptions } from './dom-game-object'\nimport { domTextureLoader } from './dom-texture-loader'\nimport { setStyle } from './dom-utils'\n\nexport type DomAnimatedSpriteNodeOptions = {\n  src: string\n  atlas: SpritesheetData\n  animation: string\n  fps: number\n  loop?: boolean\n} & DomGameObjectOptions\n\nexport class DomAnimatedSpriteNode<E extends EventMap = EventMap> extends DomGameObject<E & {\n  animationend: (animation: string) => void\n}> {\n  #src: string\n  #atlas: SpritesheetData\n  #animation: string\n  #fps: number\n  #loop: boolean\n\n  #frames: string[] = []\n  #frameDuration?: number\n  #textureScale = 1\n  #elapsedTime = 0\n  #currentFrameIdx = 0\n\n  constructor(options: DomAnimatedSpriteNodeOptions) {\n    super(options)\n    this.#src = options.src\n    this.#atlas = options.atlas\n    this.#animation = options.animation\n    this.#fps = options.fps\n    this.#loop = options.loop ?? true\n    this.#load()\n  }\n\n  async #load() {\n    let texture\n    if (domTextureLoader.checkCached(this.#src)) {\n      texture = domTextureLoader.getCached(this.#src)\n    } else {\n      console.info(`Dom texture not preloaded. Loading now: ${this.#src}`)\n      texture = await domTextureLoader.load(this.#src)\n    }\n\n    const S = this.#atlas.meta.scale === 'auto' ? 1 : Number(this.#atlas.meta.scale)\n\n    this.#frameDuration = 1 / this.#fps\n    this.#frames = this.#atlas.animations?.[this.#animation] ?? []\n    this.#textureScale = S\n\n    const frameName = this.#frames[this.#currentFrameIdx]\n    const frame = this.#atlas.frames[frameName].frame\n\n    setStyle(this.el, !frameName || !texture ? { backgroundImage: 'none' } : {\n      backgroundImage: `url(${this.#src})`,\n      width: `${frame.w * S}px`,\n      height: `${frame.h * S}px`,\n      backgroundSize: `${texture.width * S}px ${texture.height * S}px`,\n      backgroundPosition: `-${frame.x * S}px -${frame.y * S}px`\n    })\n  }\n\n  override render(dt: number) {\n    super.render(dt)\n\n    if (this.#frameDuration === undefined || this.#frames.length === 0) return\n\n    const lastIndex = this.#frames.length - 1\n    if (!this.#loop && this.#currentFrameIdx === lastIndex) return\n\n    this.#elapsedTime += dt\n    if (this.#elapsedTime < this.#frameDuration) return\n\n    while (this.#elapsedTime >= this.#frameDuration) {\n      this.#elapsedTime -= this.#frameDuration\n\n      if (this.#currentFrameIdx === lastIndex) {\n        (this as any).emit('animationend', this.#animation)\n\n        if (this.#loop) {\n          this.#currentFrameIdx = 0\n        } else {\n          this.#elapsedTime = 0\n          break\n        }\n      } else {\n        this.#currentFrameIdx++\n      }\n    }\n\n    const S = this.#textureScale\n    const frameName = this.#frames[this.#currentFrameIdx]\n    const frame = this.#atlas.frames[frameName].frame\n\n    setStyle(this.el, {\n      width: `${frame.w * S}px`,\n      height: `${frame.h * S}px`,\n      backgroundPosition: `-${frame.x * S}px -${frame.y * S}px`\n    })\n  }\n\n  set src(src) {\n    if (this.#src !== src) {\n      domTextureLoader.release(this.#src)\n      this.#src = src\n      this.#load()\n    }\n  }\n\n  get src() { return this.#src }\n\n  set atlas(atlas) {\n    if (this.#atlas !== atlas) {\n      domTextureLoader.release(this.#src)\n      this.#atlas = atlas\n      this.#load()\n    }\n  }\n\n  get atlas() { return this.#atlas }\n\n  set animation(animation) {\n    if (this.#animation !== animation) {\n      this.#animation = animation\n      this.#frames = this.#atlas.animations?.[animation] ?? []\n      this.#currentFrameIdx = 0\n      this.#elapsedTime = 0\n    }\n  }\n\n  get animation() { return this.#animation }\n\n  set fps(fps) {\n    if (this.#fps !== fps) {\n      this.#fps = fps\n      this.#frameDuration = 1 / fps\n    }\n  }\n\n  get fps() { return this.#fps }\n\n  set loop(loop) { this.#loop = loop }\n  get loop() { return this.#loop }\n\n  override remove() {\n    domTextureLoader.release(this.#src)\n    super.remove()\n  }\n}\n"]}