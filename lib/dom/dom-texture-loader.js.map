{"version":3,"file":"dom-texture-loader.js","sourceRoot":"","sources":["../../src/dom/dom-texture-loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,yBAAyB,CAAA;AAEhD,MAAM,gBAAiB,SAAQ,MAAwB;IAClC,KAAK,CAAC,MAAM,CAAC,GAAW;QACzC,MAAM,cAAc,GAAG,IAAI,OAAO,CAA+B,CAAC,OAAO,EAAE,EAAE;YAC3E,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAA;YACzB,KAAK,CAAC,WAAW,GAAG,WAAW,CAAA;YAC/B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAA;YAEf,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;gBAClB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAEhC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC5B,OAAO,CAAC,SAAS,CAAC,CAAA;oBAClB,OAAM;gBACR,CAAC;gBAED,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAA;oBACnD,OAAO,CAAC,SAAS,CAAC,CAAA;oBAClB,OAAM;gBACR,CAAC;gBAED,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;gBACjC,OAAO,CAAC,KAAK,CAAC,CAAA;YAChB,CAAC,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAChC,OAAO,CAAC,KAAK,CAAC,+BAA+B,GAAG,EAAE,EAAE,KAAK,CAAC,CAAA;gBAC1D,OAAO,CAAC,SAAS,CAAC,CAAA;YACpB,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAA;QAC7C,OAAO,MAAM,cAAc,CAAA;IAC7B,CAAC;IAEkB,OAAO,CAAC,GAAW,EAAE,OAAyB;QAC/D,OAAO,CAAC,MAAM,EAAE,CAAA;IAClB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,EAAE,CAAA","sourcesContent":["import { Loader } from '../asset/loaders/loader'\n\nclass DomTextureLoader extends Loader<HTMLImageElement> {\n  protected override async doLoad(src: string) {\n    const loadingPromise = new Promise<HTMLImageElement | undefined>((resolve) => {\n      const image = new Image()\n      image.crossOrigin = 'anonymous'\n      image.src = src\n\n      image.onload = () => {\n        this.loadingPromises.delete(src)\n\n        if (!this.hasActiveRef(src)) {\n          resolve(undefined)\n          return\n        }\n\n        if (this.cachedAssets.has(src)) {\n          console.error(`Dom texture already loaded: ${src}`)\n          resolve(undefined)\n          return\n        }\n\n        this.cachedAssets.set(src, image)\n        resolve(image)\n      }\n\n      image.onerror = (error) => {\n        this.loadingPromises.delete(src)\n        console.error(`Failed to load dom texture: ${src}`, error)\n        resolve(undefined)\n      }\n    })\n\n    this.loadingPromises.set(src, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(src: string, texture: HTMLImageElement) {\n    texture.remove()\n  }\n}\n\nexport const domTextureLoader = new DomTextureLoader()\n"]}