{"version":3,"file":"dom-particle.js","sourceRoot":"","sources":["../../src/dom/dom-particle.ts"],"names":[],"mappings":"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","sourcesContent":["import { BLEND_MODES, Sprite as PixiSprite } from 'pixi.js'\nimport { DomGameObject, DomGameObjectOptions } from './dom-game-object'\nimport { domTextureLoader } from './dom-texture-loader'\n\ntype RandomRange = { min: number, max: number }\n\nexport type DomParticleSystemOptions = {\n  texture: string\n\n  count: RandomRange\n  lifespan: RandomRange\n  angle: RandomRange\n  velocity: RandomRange\n  scale: RandomRange\n\n  startAlpha?: number\n  fadeRate: number\n  orientToVelocity: boolean\n\n  blendMode?: BLEND_MODES // ex) 'screen', 'multiply'\n} & DomGameObjectOptions\n\ninterface Particle {\n  sprite: PixiSprite\n\n  age: number\n  lifespan: number\n\n  velocityX: number\n  velocityY: number\n\n  fadeRate: number\n}\n\nfunction random(min: number, max: number) {\n  return Math.random() * (max - min) + min\n}\n\nexport class DomParticleSystem extends DomGameObject {\n  #textureSrc: string\n  #count: RandomRange\n  #lifespan: RandomRange\n  #angle: RandomRange\n  #velocity: RandomRange\n  #scale: RandomRange\n  #startAlpha?: number\n  #fadeRate: number\n  #orientToVelocity: boolean\n  #blendMode?: BLEND_MODES\n\n  #texture?: HTMLImageElement\n  #loadTexturePromise: Promise<void>\n  #particles: Particle[] = []\n\n  constructor(options: DomParticleSystemOptions) {\n    super(options)\n    this.el.style.pointerEvents = 'none'\n\n    this.#textureSrc = options.texture\n    this.#count = options.count\n    this.#lifespan = options.lifespan\n    this.#angle = options.angle\n    this.#velocity = options.velocity\n    this.#scale = options.scale\n    this.#startAlpha = options.startAlpha\n    this.#fadeRate = options.fadeRate\n    this.#orientToVelocity = options.orientToVelocity\n    this.#blendMode = options.blendMode\n\n    this.#loadTexturePromise = this.#loadTexture()\n  }\n\n  async #loadTexture() {\n    if (domTextureLoader.checkCached(this.#textureSrc)) {\n      this.#texture = domTextureLoader.getCached(this.#textureSrc)\n    } else {\n      console.info(`Dom texture not preloaded. Loading now: ${this.#textureSrc}`)\n      this.#texture = await domTextureLoader.load(this.#textureSrc)\n    }\n  }\n\n  burst({ x, y }: { x: number; y: number }) {\n    const count = random(this.#count.min, this.#count.max)\n    for (let i = 0; i < count; i++) {\n      const lifetime = random(this.#lifespan.min, this.#lifespan.max)\n      const angle = random(this.#angle.min, this.#angle.max)\n      const sin = Math.sin(angle)\n      const cos = Math.cos(angle)\n      const velocity = random(this.#velocity.min, this.#velocity.max)\n      const scale = random(this.#scale.min, this.#scale.max)\n\n      //TODO\n    }\n  }\n\n  protected update(dt: number) {\n    super.update(dt)\n\n    //TODO\n  }\n\n  override remove() {\n    domTextureLoader.release(this.#textureSrc)\n    super.remove()\n  }\n}\n"]}