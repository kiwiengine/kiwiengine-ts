{"version":3,"file":"spine.js","sourceRoot":"","sources":["../../src/game-object-ext/spine.ts"],"names":[],"mappings":"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","sourcesContent":["import { AtlasAttachmentLoader, SkeletonBinary, SkeletonData, SkeletonJson, Skin, Spine, SpineTexture, TextureAtlas } from '@esotericsoftware/spine-pixi-v8';\nimport { EventMap } from '@webtaku/event-emitter';\nimport { Texture } from 'pixi.js';\nimport { binaryLoader } from '../asset/loaders/binary';\nimport { textLoader } from '../asset/loaders/text';\nimport { textureLoader } from '../asset/loaders/texture';\nimport { GameObject, GameObjectOptions } from '../game-object/game-object';\n\ntype SpineOptions = {\n  atlas?: string;\n  skeletonData?: any;\n  skel?: string;\n  json?: string;\n  texture?: string | Record<string, string>;\n  skins?: string[];\n  animation?: string;\n  loop?: boolean;\n} & GameObjectOptions;\n\nclass SpineObject<E extends EventMap = EventMap> extends GameObject<E> {\n  #spine?: Spine;\n\n  #atlas?: string;\n  #skeletonData?: any;\n  #skel?: string;\n  #json?: string;\n  #texture?: string | Record<string, string>;\n  #skins?: string[];\n  #animation?: string;\n  #loop?: boolean;\n\n  constructor(opts?: SpineOptions) {\n    super(opts);\n    if (opts) {\n      if (opts.atlas) this.atlas = opts.atlas;\n      if (opts.skeletonData) this.skeletonData = opts.skeletonData;\n      if (opts.skel) this.skel = opts.skel;\n      if (opts.json) this.json = opts.json;\n      if (opts.texture) this.texture = opts.texture;\n      if (opts.skins) this.skins = opts.skins;\n      if (opts.animation) this.animation = opts.animation;\n      if (opts.loop) this.loop = opts.loop;\n    }\n  }\n\n  async #load() {\n    if (this.#atlas && (\n      this.#skeletonData ||\n      this.#skel ||\n      this.#json\n    )) {\n      const promises: Promise<any>[] = [];\n\n      let textAtlasData: string | undefined;\n      let skeletonBynary: Uint8Array | undefined;\n      let textSkeletonData: string | undefined;\n\n      let texture: Texture | undefined;\n      let textures: Record<string, Texture> | undefined;\n\n      if (!textLoader.checkLoaded(this.#atlas)) console.info(`Atlas not preloaded. Loading now: ${this.#atlas}`);\n      promises.push((async () => textAtlasData = await textLoader.load(this.#atlas!))());\n\n      if (this.#skeletonData) {\n        // Skeleton data is already loaded, no need to load again\n      } else if (this.#skel) {\n        if (!binaryLoader.checkLoaded(this.#skel)) console.info(`Skeleton not preloaded. Loading now: ${this.#skel}`);\n        promises.push((async () => skeletonBynary = await binaryLoader.load(this.#skel!))());\n      } else if (this.#json) {\n        if (!textLoader.checkLoaded(this.#json)) console.info(`Skeleton not preloaded. Loading now: ${this.#json}`);\n        promises.push((async () => textSkeletonData = await textLoader.load(this.#json!))());\n      } else {\n        console.error('Either skel or json must be provided');\n        return;\n      }\n\n      if (typeof this.#texture === 'string') {\n        if (!textureLoader.checkLoaded(this.#texture)) console.info(`Texture not preloaded. Loading now: ${this.#texture}`);\n        promises.push((async () => texture = await textureLoader.load(this.#texture as string))());\n      } else if (this.#texture) {\n        textures = {};\n        for (const [key, path] of Object.entries(this.#texture)) {\n          if (!textureLoader.checkLoaded(path)) console.info(`Texture not preloaded. Loading now: ${path}`);\n          promises.push((async () => {\n            const texture = await textureLoader.load(path);\n            if (texture) textures[key] = texture;\n          })());\n        }\n      }\n\n      await Promise.all(promises);\n\n      if (texture || textures) {\n        const atlas = new TextureAtlas(textAtlasData!);\n        atlas.pages.forEach((page) => {\n          if (texture) page.setTexture(SpineTexture.from(texture.source));\n          else if (textures) {\n            page.setTexture(SpineTexture.from(textures[page.name].source));\n          }\n        });\n\n        const atlasLoader = new AtlasAttachmentLoader(atlas);\n\n        let skeletonData: SkeletonData;\n        if (this.#skeletonData) {\n          const jsonLoader = new SkeletonJson(atlasLoader);\n          skeletonData = jsonLoader.readSkeletonData(this.#skeletonData);\n        } else if (skeletonBynary) {\n          const binaryLoader = new SkeletonBinary(atlasLoader);\n          skeletonData = binaryLoader.readSkeletonData(skeletonBynary);\n        } else if (textSkeletonData) {\n          const jsonLoader = new SkeletonJson(atlasLoader);\n          skeletonData = jsonLoader.readSkeletonData(textSkeletonData);\n        } else {\n          console.error('Either skel or json must be provided');\n          return;\n        }\n\n        this.#spine = new Spine(skeletonData);\n        this.#applyAnimation();\n        this.#applySkins();\n\n        this._addPixiChild(this.#spine);\n      }\n    }\n  }\n\n  #applyAnimation() {\n    if (this.#spine && this.#animation) {\n      this.#spine.state.setAnimation(\n        0,\n        this.#animation,\n        this.#loop ?? true,\n      );\n      this.#spine.state.apply(this.#spine.skeleton);\n    }\n  }\n\n  #applySkins() {\n    if (this.#spine && this.#skins) {\n      const newSkin = new Skin('combined-skin');\n      for (const skinName of this.#skins) {\n        const skin = this.#spine.skeleton.data.findSkin(skinName);\n        if (skin) newSkin.addSkin(skin);\n      }\n      this.#spine.skeleton.setSkin(newSkin);\n      this.#spine.skeleton.setSlotsToSetupPose();\n    }\n  }\n\n  get atlas() {\n    return this.#atlas;\n  }\n\n  set atlas(atlas: string | undefined) {\n    this.#atlas = atlas;\n    this.#load();\n  }\n\n  get skeletonData() {\n    return this.#skeletonData;\n  }\n\n  set skeletonData(skeletonData: any | undefined) {\n    this.#skeletonData = skeletonData;\n    this.#load();\n  }\n\n  get skel() {\n    return this.#skel;\n  }\n\n  set skel(skel: string | undefined) {\n    this.#skel = skel;\n    this.#load();\n  }\n\n  get json() {\n    return this.#json;\n  }\n\n  set json(json: string | undefined) {\n    this.#json = json;\n    this.#load();\n  }\n\n  get texture() {\n    return this.#texture;\n  }\n\n  set texture(texture: string | Record<string, string> | undefined) {\n    this.#texture = texture;\n    this.#load();\n  }\n\n  get skins() {\n    return this.#skins;\n  }\n\n  set skins(skins: string[] | undefined) {\n    this.#skins = skins;\n    this.#applySkins();\n  }\n\n  get animation() {\n    return this.#animation;\n  }\n\n  set animation(animation: string | undefined) {\n    this.#animation = animation;\n    this.#applyAnimation();\n  }\n\n  get loop() {\n    return this.#loop;\n  }\n\n  set loop(loop: boolean | undefined) {\n    this.#loop = loop;\n    this.#applyAnimation();\n  }\n\n  remove() {\n    if (typeof this.#texture === 'string') {\n      textureLoader.release(this.#texture);\n    } else if (this.#texture) {\n      for (const path of Object.values(this.#texture)) {\n        textureLoader.release(path);\n      }\n    }\n    super.remove();\n  }\n}\n\nexport { SpineObject };\n"]}