{"version":3,"file":"texture copy.js","sourceRoot":"","sources":["../../../src/asset/loaders/texture copy.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,aAAc,SAAQ,MAAe;IACtB,KAAK,CAAC,KAAK,CAAC,GAAW;QACxC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAsB,CAAC,OAAO,EAAE,EAAE;YAClE,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;YAC1B,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;YAChC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;YAEhB,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;gBAClB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEjC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC5B,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnB,OAAO;gBACT,CAAC;gBAED,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAC;oBAChD,OAAO,CAAC,SAAS,CAAC,CAAC;oBACnB,OAAO;gBACT,CAAC;gBAED,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC;YAEF,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACjC,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;gBACvD,OAAO,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,MAAM,cAAc,CAAC;IAC9B,CAAC;IAEkB,QAAQ,CAAC,GAAW,EAAE,OAAgB;QACvD,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC","sourcesContent":["import { Texture } from 'pixi.js';\nimport { Loader } from './loader';\n\nclass TextureLoader extends Loader<Texture> {\n  protected override async _load(src: string) {\n    const loadingPromise = new Promise<Texture | undefined>((resolve) => {\n      const image = new Image();\n      image.crossOrigin = 'anonymous';\n      image.src = src;\n\n      image.onload = () => {\n        this.loadingPromises.delete(src);\n\n        if (!this.hasActiveRef(src)) {\n          resolve(undefined);\n          return;\n        }\n\n        if (this.loadedAssets.has(src)) {\n          console.error(`Texture already loaded: ${src}`);\n          resolve(undefined);\n          return;\n        }\n\n        const texture = Texture.from(image);\n        this.loadedAssets.set(src, texture);\n        resolve(texture);\n      };\n\n      image.onerror = (error) => {\n        this.loadingPromises.delete(src);\n        console.error(`Failed to load texture: ${src}`, error);\n        resolve(undefined);\n      };\n    });\n\n    this.loadingPromises.set(src, loadingPromise);\n    return await loadingPromise;\n  }\n\n  protected override _dispose(src: string, texture: Texture) {\n    texture.destroy(true);\n  }\n}\n\nexport const textureLoader = new TextureLoader();\n"]}