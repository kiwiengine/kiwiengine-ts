{"version":3,"file":"audio.js","sourceRoot":"","sources":["../../../src/asset/loaders/audio.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACxC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC,MAAM,WAAY,SAAQ,MAAmB;IACxB,KAAK,CAAC,KAAK,CAAC,GAAW;QACxC,MAAM,cAAc,GAAG,CAAC,KAAK,IAAI,EAAE;YACjC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,OAAO,CAAC,KAAK,CAAC,8BAA8B,GAAG,EAAE,CAAC,CAAC;gBACnD,OAAO;YACT,CAAC;YAED,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAEjD,IAAI,CAAC;gBACH,MAAM,WAAW,GAAG,MAAM,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBAEpE,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAEjC,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC3B,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;wBAC/B,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAAC;oBACvD,CAAC;yBAAM,CAAC;wBACN,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;wBACxC,OAAO,WAAW,CAAC;oBACrB,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;gBAC5D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;QACH,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QAC9C,OAAO,MAAM,cAAc,CAAC;IAC9B,CAAC;CACF;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import { audioContext } from '../audio';\nimport { Loader } from './loader';\n\nclass AudioLoader extends Loader<AudioBuffer> {\n  protected override async _load(src: string) {\n    const loadingPromise = (async () => {\n      const response = await fetch(src);\n      if (!response.ok) {\n        console.error(`Failed to load audio data: ${src}`);\n        return;\n      }\n\n      const arrayBuffer = await response.arrayBuffer();\n\n      try {\n        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n        this.loadingPromises.delete(src);\n\n        if (this.hasActiveRef(src)) {\n          if (this.loadedAssets.has(src)) {\n            console.error(`Audio buffer already exists: ${src}`);\n          } else {\n            this.loadedAssets.set(src, audioBuffer);\n            return audioBuffer;\n          }\n        }\n      } catch (error) {\n        console.error(`Failed to decode audio data: ${src}`, error);\n        this.loadingPromises.delete(src);\n      }\n    })();\n\n    this.loadingPromises.set(src, loadingPromise);\n    return await loadingPromise;\n  }\n}\n\nexport const audioLoader = new AudioLoader();\n"]}