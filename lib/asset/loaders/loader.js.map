{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../src/asset/loaders/loader.ts"],"names":[],"mappings":"AAAA,MAAe,MAAM;IACT,YAAY,GAAG,IAAI,GAAG,EAAa,CAAA;IACnC,eAAe,GAAG,IAAI,GAAG,EAAkC,CAAA;IAErE,SAAS,GAAG,IAAI,GAAG,EAAkB,CAAA;IACrC,YAAY,CAAC,EAAU,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA,CAAC,CAAC;IAE5E,YAAY,CAAC,EAAU,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAE,GAAG,CAAC,CAAA,CAAC,CAAC;IAE/D,OAAO,CAAC,EAAU,EAAE,KAAQ,IAAqC,CAAC;IAE5E,WAAW,CAAC,EAAU;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IAClC,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,EAAU,EAAE,GAAG,IAAW;QACnC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAA;QACrB,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAAE,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QAC1D,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QAC3E,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;IACvC,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACvC,IAAI,QAAQ,KAAK,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAA;QACrE,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YACzB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;YACvC,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;gBACvB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAC9B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAA;QACtC,CAAC;IACH,CAAC;CACF;AAED,OAAO,EAAE,MAAM,EAAE,CAAA","sourcesContent":["abstract class Loader<T> {\n  protected loadedAssets = new Map<string, T>()\n  protected loadingPromises = new Map<string, Promise<T | undefined>>()\n\n  #refCount = new Map<string, number>()\n  #incRefCount(id: string) { this.#refCount.set(id, (this.#refCount.get(id) || 0) + 1) }\n\n  protected hasActiveRef(id: string) { return this.#refCount.get(id)! > 0 }\n  protected abstract doLoad(id: string, ...args: any[]): Promise<T | undefined>\n  protected cleanup(id: string, asset: T): void { /* override to clean up */ }\n\n  checkLoaded(id: string) {\n    return this.loadedAssets.has(id)\n  }\n\n  async load(id: string, ...args: any[]) {\n    this.#incRefCount(id)\n    if (this.checkLoaded(id)) return this.loadedAssets.get(id)\n    if (this.loadingPromises.has(id)) return await this.loadingPromises.get(id)\n    return await this.doLoad(id, ...args)\n  }\n\n  release(id: string) {\n    const refCount = this.#refCount.get(id)\n    if (refCount === undefined) throw new Error(`Asset not found: ${id}`)\n    if (refCount === 1) {\n      this.#refCount.delete(id)\n      const asset = this.loadedAssets.get(id)\n      if (asset) {\n        this.cleanup(id, asset)\n        this.loadedAssets.delete(id)\n      }\n    } else {\n      this.#refCount.set(id, refCount - 1)\n    }\n  }\n}\n\nexport { Loader }\n"]}