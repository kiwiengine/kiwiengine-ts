{"version":3,"file":"texture.js","sourceRoot":"","sources":["../../../src/asset/loaders/texture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAA;AACjC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AAEjC,MAAM,aAAc,SAAQ,MAAe;IACtB,KAAK,CAAC,MAAM,CAAC,GAAW;QACzC,MAAM,cAAc,GAAG,CAAC,KAAK,IAAI,EAAE;YACjC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAA;YACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAA;gBAC/C,OAAM;YACR,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YAClC,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,IAAI,EAAE,EAAE,gBAAgB,EAAE,aAAa,EAAE,CAAC,CAAA;YAEjF,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;YAEhC,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC3B,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAA;gBACjD,CAAC;qBAAM,CAAC;oBACN,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;oBACpC,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAA;oBACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;oBACnC,OAAO,OAAO,CAAA;gBAChB,CAAC;YACH,CAAC;QACH,CAAC,CAAC,EAAE,CAAA;QAEJ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAA;QAC7C,OAAO,MAAM,cAAc,CAAA;IAC7B,CAAC;CACF;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAA","sourcesContent":["import { Texture } from 'pixi.js'\nimport { Loader } from './loader'\n\nclass TextureLoader extends Loader<Texture> {\n  protected override async doLoad(src: string) {\n    const loadingPromise = (async () => {\n      const response = await fetch(src)\n      if (!response.ok) {\n        console.error(`Failed to load texture: ${src}`)\n        return\n      }\n\n      const blob = await response.blob()\n      const bitmap = await createImageBitmap(blob, { premultiplyAlpha: 'premultiply' })\n\n      this.loadingPromises.delete(src)\n\n      if (this.hasActiveRef(src)) {\n        if (this.cachedAssets.has(src)) {\n          console.error(`Texture already exists: ${src}`)\n        } else {\n          const texture = Texture.from(bitmap)\n          texture.source.scaleMode = 'nearest'\n          this.cachedAssets.set(src, texture)\n          return texture\n        }\n      }\n    })()\n\n    this.loadingPromises.set(src, loadingPromise)\n    return await loadingPromise\n  }\n}\n\nexport const textureLoader = new TextureLoader()\n"]}