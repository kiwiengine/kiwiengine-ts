{"version":3,"file":"texture.js","sourceRoot":"","sources":["../../../src/asset/loaders/texture.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,SAAS,CAAA;AACjC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAA;AAEjC,MAAM,aAAc,SAAQ,MAAe;IACtB,KAAK,CAAC,MAAM,CAAC,GAAW;QACzC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAsB,CAAC,OAAO,EAAE,EAAE;YAClE,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAA;YACzB,KAAK,CAAC,WAAW,GAAG,WAAW,CAAA;YAC/B,KAAK,CAAC,GAAG,GAAG,GAAG,CAAA;YAEf,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;gBAClB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAEhC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC5B,OAAO,CAAC,SAAS,CAAC,CAAA;oBAClB,OAAM;gBACR,CAAC;gBAED,IAAI,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC/B,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAA;oBAC/C,OAAO,CAAC,SAAS,CAAC,CAAA;oBAClB,OAAM;gBACR,CAAC;gBAED,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBACnC,OAAO,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAA;gBACpC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;gBACnC,OAAO,CAAC,OAAO,CAAC,CAAA;YAClB,CAAC,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;gBACxB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAChC,OAAO,CAAC,KAAK,CAAC,2BAA2B,GAAG,EAAE,EAAE,KAAK,CAAC,CAAA;gBACtD,OAAO,CAAC,SAAS,CAAC,CAAA;YACpB,CAAC,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,CAAC,CAAA;QAC7C,OAAO,MAAM,cAAc,CAAA;IAC7B,CAAC;IAEkB,OAAO,CAAC,GAAW,EAAE,OAAgB;QACtD,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IACvB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAA","sourcesContent":["import { Texture } from 'pixi.js'\nimport { Loader } from './loader'\n\nclass TextureLoader extends Loader<Texture> {\n  protected override async doLoad(src: string) {\n    const loadingPromise = new Promise<Texture | undefined>((resolve) => {\n      const image = new Image()\n      image.crossOrigin = 'anonymous'\n      image.src = src\n\n      image.onload = () => {\n        this.loadingPromises.delete(src)\n\n        if (!this.hasActiveRef(src)) {\n          resolve(undefined)\n          return\n        }\n\n        if (this.cachedAssets.has(src)) {\n          console.error(`Texture already loaded: ${src}`)\n          resolve(undefined)\n          return\n        }\n\n        const texture = Texture.from(image)\n        texture.source.scaleMode = 'nearest'\n        this.cachedAssets.set(src, texture)\n        resolve(texture)\n      }\n\n      image.onerror = (error) => {\n        this.loadingPromises.delete(src)\n        console.error(`Failed to load texture: ${src}`, error)\n        resolve(undefined)\n      }\n    })\n\n    this.loadingPromises.set(src, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(src: string, texture: Texture) {\n    texture.destroy(true)\n  }\n}\n\nexport const textureLoader = new TextureLoader()\n"]}