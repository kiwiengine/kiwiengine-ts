{"version":3,"file":"bitmap-font.js","sourceRoot":"","sources":["../../../src/asset/loaders/bitmap-font.ts"],"names":[],"mappings":"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","sourcesContent":["import { BitmapFont, Char } from '../../types/bitmap-font';\nimport { Loader } from './loader';\nimport { textureLoader } from './texture';\n\nclass BitmapFontLoader extends Loader<BitmapFont> {\n  #fntToSrc = new Map<string, string>();\n\n  protected override async _load(fnt: string, src: string) {\n    this.#fntToSrc.set(fnt, src);\n\n    const loadingPromise = (async () => {\n      const texture = await textureLoader.load(src);\n      if (!texture) {\n        console.error(`Failed to load texture: ${src}`);\n        return;\n      }\n\n      const response = await fetch(fnt);\n      if (!response.ok) {\n        console.error(`Failed to load text: ${src}`);\n        return;\n      }\n\n      const text = await response.text();\n\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(text, 'application/xml');\n\n      const infoEl = xmlDoc.getElementsByTagName('info')[0];\n      const commonEl = xmlDoc.getElementsByTagName('common')[0];\n      const charEls = xmlDoc.getElementsByTagName('char');\n\n      const size = parseInt(infoEl.getAttribute('size') || '16', 10);\n      const lineHeight = parseInt(commonEl.getAttribute('lineHeight') || '32', 10);\n\n      const chars: Record<number, Char> = {};\n\n      for (let i = 0; i < charEls.length; i++) {\n        const charEl = charEls[i];\n\n        const id = parseInt(charEl.getAttribute('id')!, 10);\n        const x = parseInt(charEl.getAttribute('x')!, 10);\n        const y = parseInt(charEl.getAttribute('y')!, 10);\n        const width = parseInt(charEl.getAttribute('width')!, 10);\n        const height = parseInt(charEl.getAttribute('height')!, 10);\n        const xoffset = parseInt(charEl.getAttribute('xoffset')!, 10);\n        const yoffset = parseInt(charEl.getAttribute('yoffset')!, 10);\n        const xadvance = parseInt(charEl.getAttribute('xadvance')!, 10);\n\n        chars[id] = { x, y, width, height, xoffset, yoffset, xadvance };\n      }\n\n      this.loadingPromises.delete(fnt);\n\n      if (this.hasActiveRef(fnt)) {\n        if (this.loadedAssets.has(fnt)) {\n          console.error(`Bitmap font already exists: ${fnt}`);\n        } else {\n          const bitmapFont: BitmapFont = { chars, texture, size, lineHeight };\n          this.loadedAssets.set(fnt, bitmapFont);\n          return bitmapFont;\n        }\n      }\n    })();\n\n    this.loadingPromises.set(fnt, loadingPromise);\n    return await loadingPromise;\n  }\n\n  protected override _dispose(fnt: string) {\n    const src = this.#fntToSrc.get(fnt);\n    if (src) textureLoader.release(src);\n  }\n}\n\nexport const bitmapFontLoader = new BitmapFontLoader();\n"]}