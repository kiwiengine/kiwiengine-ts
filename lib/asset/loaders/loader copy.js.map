{"version":3,"file":"loader copy.js","sourceRoot":"","sources":["../../../src/asset/loaders/loader copy.ts"],"names":[],"mappings":"AAAA,MAAe,MAAM;IACT,YAAY,GAAmB,IAAI,GAAG,EAAE,CAAC;IACzC,eAAe,GAAwC,IAAI,GAAG,EAAE,CAAC;IAE3E,SAAS,GAAwB,IAAI,GAAG,EAAE,CAAC;IAC3C,YAAY,CAAC,EAAU,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE7E,YAAY,CAAC,EAAU,IAAI,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAEhE,QAAQ,CAAC,EAAU,EAAE,KAAQ,IAAqC,CAAC;IAE7E,WAAW,CAAC,EAAU;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,EAAU,EAAE,GAAG,IAAW;QACnC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACtB,IAAI,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAAE,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC3D,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;YAAE,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC5E,OAAO,MAAM,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACxC,IAAI,QAAQ,KAAK,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QACtE,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACxC,IAAI,KAAK,EAAE,CAAC;gBACV,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;CACF;AAED,OAAO,EAAE,MAAM,EAAE,CAAC","sourcesContent":["abstract class Loader<T> {\n  protected loadedAssets: Map<string, T> = new Map();\n  protected loadingPromises: Map<string, Promise<T | undefined>> = new Map();\n\n  #refCount: Map<string, number> = new Map();\n  #incRefCount(id: string) { this.#refCount.set(id, (this.#refCount.get(id) || 0) + 1); }\n\n  protected hasActiveRef(id: string) { return this.#refCount.get(id)! > 0; }\n  protected abstract _load(id: string, ...args: any[]): Promise<T | undefined>;\n  protected _dispose(id: string, asset: T): void { /* override to clean up */ }\n\n  checkLoaded(id: string) {\n    return this.loadedAssets.has(id);\n  }\n\n  async load(id: string, ...args: any[]) {\n    this.#incRefCount(id);\n    if (this.checkLoaded(id)) return this.loadedAssets.get(id);\n    if (this.loadingPromises.has(id)) return await this.loadingPromises.get(id);\n    return await this._load(id, ...args);\n  }\n\n  release(id: string) {\n    const refCount = this.#refCount.get(id);\n    if (refCount === undefined) throw new Error(`Asset not found: ${id}`);\n    if (refCount === 1) {\n      this.#refCount.delete(id);\n      const asset = this.loadedAssets.get(id);\n      if (asset) {\n        this._dispose(id, asset);\n        this.loadedAssets.delete(id);\n      }\n    } else {\n      this.#refCount.set(id, refCount - 1);\n    }\n  }\n}\n\nexport { Loader };\n"]}