{"version":3,"file":"spritesheet.js","sourceRoot":"","sources":["../../../src/asset/loaders/spritesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dict, Spritesheet, SpritesheetFrameData } from 'pixi.js'\nimport { Atlas } from '../../types/atlas'\nimport { Loader } from './loader'\nimport { textureLoader } from './texture'\n\nconst atlasIdCache = new WeakMap<Atlas, Map<string, string>>()\nlet idCounter = 0\n\nexport function getCachedAtlasId(src: string, atlas: Atlas): string {\n  let innerMap = atlasIdCache.get(atlas)\n  if (!innerMap) {\n    innerMap = new Map<string, string>()\n    atlasIdCache.set(atlas, innerMap)\n  }\n\n  if (!innerMap.has(src)) {\n    innerMap.set(src, `${src}#${idCounter++}`)\n  }\n\n  return innerMap.get(src)!\n}\n\nclass SpritesheetLoader extends Loader<Spritesheet> {\n  #idToSrc = new Map<string, string>();\n\n  protected override async doLoad(id: string, src: string, atlas: Atlas) {\n    this.#idToSrc.set(id, src)\n\n    const loadingPromise = (async () => {\n      const texture = await textureLoader.load(src)\n      if (!texture) {\n        console.error(`Failed to load texture: ${src}`)\n        return\n      }\n\n      const frames: Dict<SpritesheetFrameData> = {}\n      for (const [key, value] of Object.entries(atlas.frames)) {\n        frames[key] = { frame: value }\n      }\n      const animations: Dict<string[]> = {}\n      for (const [key, value] of Object.entries(atlas.animations)) {\n        animations[key] = value.frames\n      }\n      const spritesheet = new Spritesheet(texture, { frames, meta: { scale: 1 }, animations })\n      await spritesheet.parse()\n\n      this.loadingPromises.delete(id)\n\n      if (this.hasActiveRef(id)) {\n        if (this.cachedAssets.has(id)) {\n          textureLoader.release(src)\n          console.error(`Spritesheet already exists: ${src}`)\n        } else {\n          this.cachedAssets.set(id, spritesheet)\n          return spritesheet\n        }\n      } else {\n        textureLoader.release(src)\n      }\n    })()\n\n    this.loadingPromises.set(id, loadingPromise)\n    return await loadingPromise\n  }\n\n  protected override cleanup(id: string, spritesheet: Spritesheet) {\n    spritesheet.destroy()\n\n    const src = this.#idToSrc.get(id)\n    if (src) textureLoader.release(src)\n  }\n}\n\nexport const spritesheetLoader = new SpritesheetLoader()\n"]}