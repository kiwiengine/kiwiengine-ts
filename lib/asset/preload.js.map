{"version":3,"file":"preload.js","sourceRoot":"","sources":["../../src/asset/preload.ts"],"names":[],"mappings":"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","sourcesContent":["import { SpritesheetData } from 'pixi.js';\nimport { audioLoader } from './loaders/audio';\nimport { binaryLoader } from './loaders/binary';\nimport { bitmapFontLoader } from './loaders/bitmap-font';\nimport { fontFamilyLoader } from './loaders/font';\nimport { getCachedId, spritesheetLoader } from './loaders/spritesheet';\nimport { textLoader } from './loaders/text';\nimport { textureLoader } from './loaders/texture';\n\nexport type SpritesheetSource = { src: string; atlas: SpritesheetData };\nexport type BitmapFontSource = { fnt: string; src: string };\nexport type AssetSource = string | SpritesheetSource | BitmapFontSource;\n\nconst hasExt = (path: string, ...exts: readonly string[]): boolean => {\n  const lower = path.toLowerCase();\n  return exts.some((e) => lower.endsWith(e));\n};\n\nexport function isText(path: string): boolean {\n  return hasExt(path, '.json', '.atlas');\n}\n\nexport function isBinary(path: string): boolean {\n  return hasExt(path, '.skel');\n}\n\nexport function isImage(path: string): boolean {\n  return hasExt(path, '.png', '.jpg', '.jpeg', '.gif', '.webp');\n}\n\nexport function isAudio(path: string): boolean {\n  return hasExt(path, '.mp3', '.wav', '.ogg');\n}\n\nexport function isFontFamily(fontFamily: string): boolean {\n  // e.g. 'Inter' or 'Arial', not 'Inter.ttf'\n  return !fontFamily.includes('.');\n}\n\nexport function isSpritesheet(asset: AssetSource): asset is SpritesheetSource {\n  return typeof asset === 'object' && asset !== null && 'src' in asset && 'atlas' in asset;\n}\n\nexport function isBitmapFont(asset: AssetSource): asset is BitmapFontSource {\n  return typeof asset === 'object' && asset !== null && 'fnt' in asset;\n}\n\nexport function isStringAsset(asset: AssetSource): asset is string {\n  return typeof asset === 'string';\n}\n\nexport async function preload(\n  assets: readonly AssetSource[],\n  progressCallback?: (progress01: number) => void,\n): Promise<() => void> {\n  const total = assets.length;\n  let loaded = 0;\n\n  // Edge case: nothing to do\n  if (total === 0) {\n    progressCallback?.(1);\n    return () => void 0;\n  }\n\n  const updateProgress = () => {\n    loaded += 1;\n    progressCallback?.(loaded / total);\n  };\n\n  await Promise.all(\n    assets.map(async (asset) => {\n      try {\n        if (isStringAsset(asset)) {\n          if (isText(asset)) {\n            await textLoader.load(asset);\n          } else if (isBinary(asset)) {\n            await binaryLoader.load(asset);\n          } else if (isImage(asset)) {\n            await textureLoader.load(asset);\n          } else if (isAudio(asset)) {\n            await audioLoader.load(asset);\n          } else if (isFontFamily(asset)) {\n            await fontFamilyLoader.load(asset);\n          } else {\n            console.error(`Unknown asset type: ${asset}`);\n          }\n        } else if (isSpritesheet(asset)) {\n          const id = getCachedId(asset.src, asset.atlas);\n          await spritesheetLoader.load(id, asset.src, asset.atlas);\n        } else if (isBitmapFont(asset)) {\n          await bitmapFontLoader.load(asset.fnt, asset.src);\n        } else {\n          console.error('Unsupported asset variant encountered');\n        }\n      } finally {\n        updateProgress();\n      }\n    }),\n  );\n\n  // Return disposer to release all loaded assets\n  return () => {\n    for (const asset of assets) {\n      if (isStringAsset(asset)) {\n        if (isText(asset)) {\n          textLoader.release(asset);\n        } else if (isBinary(asset)) {\n          binaryLoader.release(asset);\n        } else if (isImage(asset)) {\n          textureLoader.release(asset);\n        } else if (isAudio(asset)) {\n          audioLoader.release(asset);\n        } else if (isFontFamily(asset)) {\n          fontFamilyLoader.release(asset);\n        } else {\n          console.error(`Unknown asset type: ${asset}`);\n        }\n      } else if (isSpritesheet(asset)) {\n        const id = getCachedId(asset.src, asset.atlas);\n        spritesheetLoader.release(id);\n      } else if (isBitmapFont(asset)) {\n        bitmapFontLoader.release(asset.fnt);\n      }\n    }\n  };\n}\n"]}