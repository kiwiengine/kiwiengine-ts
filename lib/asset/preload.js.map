{"version":3,"file":"preload.js","sourceRoot":"","sources":["../../src/asset/preload.ts"],"names":[],"mappings":"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","sourcesContent":["import { SpritesheetData } from 'pixi.js';\nimport { audioLoader } from './loaders/audio';\nimport { fontFamilyLoader } from './loaders/font';\nimport { getCachedId, spritesheetLoader } from './loaders/spritesheet';\nimport { textureLoader } from './loaders/texture';\n\ntype AssetSource = string | {\n  src: string;\n  atlas: SpritesheetData;\n};\n\nfunction isImage(path: string): boolean {\n  return path.endsWith('.png') ||\n    path.endsWith('.jpg') ||\n    path.endsWith('.jpeg') ||\n    path.endsWith('.gif') ||\n    path.endsWith('.webp');\n}\n\nfunction isAudio(path: string): boolean {\n  return path.endsWith('.mp3') ||\n    path.endsWith('.wav') ||\n    path.endsWith('.ogg');\n}\n\nfunction isFontFamily(fontFamily: string): boolean {\n  return !fontFamily.includes('.');\n}\n\nasync function preload(assets: AssetSource[], progressCallback: (progress: number) => void) {\n  const total = assets.length;\n  let loaded = 0;\n\n  await Promise.all(assets.map(async (asset) => {\n    if (typeof asset === 'string') {\n      if (isImage(asset)) {\n        await textureLoader.load(asset);\n      } else if (isAudio(asset)) {\n        await audioLoader.load(asset);\n      } else if (isFontFamily(asset)) {\n        await fontFamilyLoader.load(asset);\n      } else {\n        console.error(`Unknown asset type: ${asset}`);\n      }\n    }\n    else {\n      const id = getCachedId(asset.src, asset.atlas);\n      await spritesheetLoader.load(id, asset.src, asset.atlas);\n    }\n\n    loaded++;\n    progressCallback?.(loaded / total);\n  }));\n\n  return () => {\n    assets.forEach((asset) => {\n      if (typeof asset === 'string') {\n        if (isImage(asset)) {\n          textureLoader.release(asset);\n        } else if (isAudio(asset)) {\n          audioLoader.release(asset);\n        } else if (isFontFamily(asset)) {\n          fontFamilyLoader.release(asset);\n        } else {\n          console.error(`Unknown asset type: ${asset}`);\n        }\n      }\n      else {\n        const id = getCachedId(asset.src, asset.atlas);\n        spritesheetLoader.release(id);\n      }\n    });\n  };\n}\n\nexport { AssetSource, preload };\n"]}