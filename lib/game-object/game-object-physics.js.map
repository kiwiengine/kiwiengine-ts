{"version":3,"file":"game-object-physics.js","sourceRoot":"","sources":["../../src/game-object/game-object-physics.ts"],"names":[],"mappings":"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","sourcesContent":["import Matter, { IChamferableBodyDefinition } from 'matter-js';\nimport { debugMode } from '../utils/debug';\nimport { GameObject } from './game-object';\nimport { localOffsetToWorld, worldToLocalWithNewWorld } from './transform';\n\ntype BaseCollider = { x?: number; y?: number; };\ntype RectangleCollider = BaseCollider & { type: 'rect'; width: number; height: number };\ntype CircleCollider = BaseCollider & { type: 'circle'; radius: number };\ntype VerticesCollider = BaseCollider & { type: 'vert'; vertices: { x: number; y: number }[] };\nexport type Collider = RectangleCollider | CircleCollider | VerticesCollider;\n\nexport class GameObjectPhysics {\n  #collider?: Collider;\n  #isStatic = false;\n  #isSensor = false;\n  #velocityX = 0;\n  #velocityY = 0;\n  #fixedRotation = false;\n\n  #go: GameObject;\n  #matterBody?: Matter.Body;\n\n  constructor(go: GameObject) {\n    this.#go = go;\n  }\n\n  #removeBody() {\n    const world = this.#go._getWorld();\n    if (!world || !this.#matterBody) return;\n    world._worldPhysics.removeBody(this.#matterBody);\n  }\n\n  #lastScaleX = 1;\n  #lastScaleY = 1;\n  #initialInertia?: number;\n\n  #createBody() {\n    const world = this.#go._getWorld();\n    if (!this.#collider || !world) return;\n\n    const wt = this.#go._wt;\n    const { x: ox, y: oy } = localOffsetToWorld(wt, this.#collider?.x ?? 0, this.#collider?.y ?? 0);\n    const x = wt.x.v + ox;\n    const y = wt.y.v + oy;\n\n    const bodyOpts: IChamferableBodyDefinition = {\n      angle: wt.rotation.v,\n      isStatic: this.#isStatic,\n      isSensor: this.#isSensor,\n      velocity: { x: this.#velocityX, y: this.#velocityY },\n    };\n\n    if (this.#collider.type === 'rect') this.#matterBody = Matter.Bodies.rectangle(x, y, this.#collider.width, this.#collider.height, bodyOpts);\n    else if (this.#collider.type === 'circle') this.#matterBody = Matter.Bodies.circle(x, y, this.#collider.radius, bodyOpts);\n    else if (this.#collider.type === 'vert') this.#matterBody = Matter.Bodies.fromVertices(x, y, [this.#collider.vertices], bodyOpts);\n    else throw new Error('Invalid collider type');\n\n    this.#matterBody.plugin.owner = this.#go;\n    this.#lastScaleX = wt.scaleX.v;\n    this.#lastScaleY = wt.scaleY.v;\n    Matter.Body.scale(this.#matterBody, wt.scaleX.v, wt.scaleY.v);\n\n    this.#initialInertia = this.#matterBody.inertia;\n    if (this.#fixedRotation) {\n      Matter.Body.setInertia(this.#matterBody, Infinity);\n      Matter.Body.setAngularVelocity(this.#matterBody, 0);\n    }\n\n    world._worldPhysics.addBody(this.#matterBody);\n    this.#setDebugRenderStyle();\n  }\n\n  applyChanges() {\n    if (this.#collider && !this.#matterBody) this.#createBody();\n    if (!this.#matterBody) return;\n\n    const wt = this.#go._wt;\n    const { x: ox, y: oy } = localOffsetToWorld(wt, this.#collider?.x ?? 0, this.#collider?.y ?? 0);\n\n    if (wt.x.dirty || wt.scaleX.dirty || wt.y.dirty || wt.scaleY.dirty) {\n      if ((wt.x.dirty || wt.scaleX.dirty) && (wt.y.dirty || wt.scaleY.dirty)) Matter.Body.setPosition(this.#matterBody, { x: wt.x.v + ox, y: wt.y.v + oy });\n      else if (wt.x.dirty || wt.scaleX.dirty) Matter.Body.setPosition(this.#matterBody, { x: wt.x.v + ox, y: this.#matterBody.position.y });\n      else if (wt.y.dirty || wt.scaleY.dirty) Matter.Body.setPosition(this.#matterBody, { x: this.#matterBody.position.x, y: wt.y.v + oy });\n    }\n    if (wt.scaleX.dirty || wt.scaleY.dirty) {\n      const scaleDiffX = wt.scaleX.v / this.#lastScaleX;\n      const scaleDiffY = wt.scaleY.v / this.#lastScaleY;\n      Matter.Body.scale(this.#matterBody, scaleDiffX, scaleDiffY);\n      this.#lastScaleX = wt.scaleX.v;\n      this.#lastScaleY = wt.scaleY.v;\n    }\n    if (wt.rotation.dirty) Matter.Body.setAngle(this.#matterBody, wt.rotation.v);\n\n    const lt = this.#go._lt;\n    if (!wt.x.dirty || !wt.y.dirty || !wt.rotation.dirty) {\n      const { x, y, rotation, newWorldX, newWorldY, newWorldRotation } =\n        worldToLocalWithNewWorld(\n          wt,\n          lt,\n          this.#matterBody.position.x - ox,\n          this.#matterBody.position.y - oy,\n          this.#matterBody.angle\n        );\n      if (!wt.x.dirty) { lt.x.v = x; wt.x.v = newWorldX; }\n      if (!wt.y.dirty) { lt.y.v = y; wt.y.v = newWorldY; }\n      if (!wt.rotation.dirty) { lt.rotation.v = rotation; wt.rotation.v = newWorldRotation; }\n    }\n  }\n\n  destroy() {\n    this.#removeBody();\n  }\n\n  get collider() { return this.#collider; }\n  set collider(value: Collider | undefined) {\n    this.#removeBody();\n    this.#collider = value;\n  }\n\n  get isStatic() {\n    if (this.#matterBody) return this.#matterBody.isStatic;\n    else return this.#isStatic;\n  }\n  set isStatic(value: boolean) {\n    this.#isStatic = value;\n    if (this.#matterBody) Matter.Body.setStatic(this.#matterBody, value);\n    this.#setDebugRenderStyle();\n  }\n\n  get isSensor() {\n    if (this.#matterBody) return this.#matterBody.isSensor;\n    else return this.#isSensor;\n  }\n  set isSensor(value: boolean) {\n    this.#isSensor = value;\n    if (this.#matterBody) this.#matterBody.isSensor = value;\n    this.#setDebugRenderStyle();\n  }\n\n  get velocityX() {\n    if (this.#matterBody) return this.#matterBody.velocity.x;\n    else return this.#velocityX;\n  }\n  set velocityX(value: number) {\n    this.#velocityX = value;\n    if (this.#matterBody) Matter.Body.setVelocity(this.#matterBody, { x: value, y: this.#velocityY });\n  }\n\n  get velocityY() {\n    if (this.#matterBody) return this.#matterBody.velocity.y;\n    else return this.#velocityY;\n  }\n  set velocityY(value: number) {\n    this.#velocityY = value;\n    if (this.#matterBody) Matter.Body.setVelocity(this.#matterBody, { x: this.#velocityX, y: value });\n  }\n\n  get fixedRotation() { return this.#fixedRotation; }\n  set fixedRotation(value: boolean) {\n    this.#fixedRotation = value;\n    if (this.#matterBody) {\n      if (value) {\n        Matter.Body.setInertia(this.#matterBody, Infinity);\n        Matter.Body.setAngularVelocity(this.#matterBody, 0);\n      } else {\n        Matter.Body.setInertia(this.#matterBody, this.#initialInertia!);\n        Matter.Body.setAngularVelocity(this.#matterBody, 0);\n      }\n    }\n  }\n\n  #setDebugRenderStyle() {\n    if (!debugMode || !this.#matterBody) return;\n\n    if (this.#isSensor) {\n      this.#matterBody.render.fillStyle = 'rgba(255,255,0,0.1)';\n      this.#matterBody.render.strokeStyle = 'rgba(255,255,0,0.25)';\n      this.#matterBody.render.lineWidth = 1;\n    }\n    else if (this.#isStatic) {\n      this.#matterBody.render.fillStyle = 'rgba(255,0,0,0.1)';\n      this.#matterBody.render.strokeStyle = 'rgba(255,0,0,0.25)';\n      this.#matterBody.render.lineWidth = 1;\n    }\n    else {\n      this.#matterBody.render.fillStyle = 'rgba(0,255,0,0.1)';\n      this.#matterBody.render.strokeStyle = 'rgba(0,255,0,0.25)';\n      this.#matterBody.render.lineWidth = 1;\n    }\n  }\n}\n"]}