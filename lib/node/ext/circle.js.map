{"version":3,"file":"circle.js","sourceRoot":"","sources":["../../../src/node/ext/circle.ts"],"names":[],"mappings":"AACA,OAAO,EAAa,QAAQ,EAAe,MAAM,SAAS,CAAA;AAC1D,OAAO,EAAE,WAAW,EAAsB,MAAM,sBAAsB,CAAA;AAQtE,MAAM,OAAO,UAAW,SAAQ,WAA+B;IAC7D,OAAO,CAAQ;IACf,KAAK,CAAY;IACjB,OAAO,CAAc;IAErB,YAAY,OAA0B;QACpC,KAAK,CAAC,IAAI,QAAQ,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;QAExD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAA;QAC7B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAA;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAA;QAE7B,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IAED,KAAK;QACH,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QACtD,IAAI,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACpD,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC5D,CAAC;IAED,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,OAAO,CAAA,CAAC,CAAC;IACpC,IAAI,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC;IAEhD,IAAI,IAAI,KAAK,OAAO,IAAI,CAAC,KAAK,CAAA,CAAC,CAAC;IAChC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC;IAE5C,IAAI,MAAM,KAAK,OAAO,IAAI,CAAC,OAAO,CAAA,CAAC,CAAC;IACpC,IAAI,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC;CACjD","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { FillInput, Graphics, StrokeInput } from 'pixi.js'\nimport { DisplayNode, DisplayNodeOptions } from '../core/display-node'\n\nexport type CircleNodeOptions = {\n  radius: number\n  fill?: FillInput\n  stroke?: StrokeInput\n} & DisplayNodeOptions\n\nexport class CircleNode extends DisplayNode<Graphics, EventMap> {\n  #radius: number\n  #fill?: FillInput\n  #stroke?: StrokeInput\n\n  constructor(options: CircleNodeOptions) {\n    super(new Graphics({ sortableChildren: true }), options)\n\n    this.#radius = options.radius\n    this.#fill = options.fill\n    this.#stroke = options.stroke\n\n    this.#draw()\n  }\n\n  #draw() {\n    this._pixiContainer.clear().circle(0, 0, this.#radius)\n    if (this.#fill) this._pixiContainer.fill(this.#fill)\n    if (this.#stroke) this._pixiContainer.stroke(this.#stroke)\n  }\n\n  get radius() { return this.#radius }\n  set radius(v) { this.#radius = v; this.#draw() }\n\n  get fill() { return this.#fill }\n  set fill(v) { this.#fill = v; this.#draw() }\n\n  get stroke() { return this.#stroke }\n  set stroke(v) { this.#stroke = v; this.#draw() }\n}\n"]}