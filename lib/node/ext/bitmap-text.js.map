{"version":3,"file":"bitmap-text.js","sourceRoot":"","sources":["../../../src/node/ext/bitmap-text.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { Rectangle as PixiRectangle, Sprite as PixiSprite, Texture as PixiTexture } from 'pixi.js'\nimport { bitmapFontLoader } from '../../asset/loaders/bitmap-font'\nimport { GameObject, GameObjectOptions } from '../core/game-object'\n\nexport type BitmapTextNodeOptions = {\n  fnt: string\n  src: string\n  text: string\n} & GameObjectOptions\n\nexport class BitmapTextNode<E extends EventMap = EventMap> extends GameObject<E> {\n  #fnt: string\n  #src: string\n  #text: string\n  #sprites: PixiSprite[] = []\n\n  constructor(options: BitmapTextNodeOptions) {\n    super(options)\n    this.#fnt = options.fnt\n    this.#src = options.src\n    this.#text = options.text\n    this.#load()\n  }\n\n  async #load() {\n    let font\n    if (bitmapFontLoader.checkCached(this.#fnt)) {\n      font = bitmapFontLoader.getCached(this.#fnt)\n    } else {\n      console.info(`Bitmap font not preloaded. Loading now: ${this.#fnt}`)\n      font = await bitmapFontLoader.load(this.#fnt, this.#src)\n    }\n    if (!font) return\n\n    for (const sprite of this.#sprites) {\n      sprite.destroy()\n    }\n    this.#sprites = []\n\n    let xPos = 0, yPos = 0\n    let minX = Infinity, minY = Infinity\n    let maxX = -Infinity, maxY = -Infinity\n\n    for (let i = 0; i < this.#text.length; i++) {\n      const charCode = this.#text.charCodeAt(i)\n\n      if (charCode === 10) {\n        xPos = 0\n        yPos += font.lineHeight\n        continue\n      }\n\n      const c = font.chars[charCode]\n      if (!c) continue\n\n      const frame = new PixiRectangle(c.x, c.y, c.width, c.height)\n      const texture = new PixiTexture({ source: font.texture.source, frame })\n      const sprite = new PixiSprite(texture)\n\n      const x0 = xPos + c.xoffset\n      const y0 = yPos + c.yoffset\n\n      sprite.x = x0\n      sprite.y = y0\n\n      this.#sprites.push(sprite)\n\n      const x1 = x0 + c.width\n      const y1 = y0 + c.height\n\n      if (x0 < minX) minX = x0\n      if (y0 < minY) minY = y0\n      if (x1 > maxX) maxX = x1\n      if (y1 > maxY) maxY = y1\n\n      xPos += c.xadvance\n    }\n\n    if (minX === Infinity) {\n      minX = 0\n      minY = 0\n    }\n\n    if (maxX === -Infinity) {\n      maxX = 0\n      maxY = 0\n    }\n\n    const width = maxX - minX\n    const height = maxY - minY\n\n    for (const s of this.#sprites) {\n      s.x -= width / 2\n      s.y -= height / 2\n      this._pixiContainer.addChild(s)\n    }\n  }\n\n  changeFont(fnt: string, src: string) {\n    if (this.#fnt !== fnt || this.#src !== src) {\n      bitmapFontLoader.release(this.#fnt)\n      this.#fnt = fnt\n      this.#src = src\n      this.#load()\n    }\n  }\n\n  override remove() {\n    bitmapFontLoader.release(this.#fnt)\n    super.remove()\n  }\n}\n"]}