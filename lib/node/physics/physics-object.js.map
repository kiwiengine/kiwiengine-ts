{"version":3,"file":"physics-object.js","sourceRoot":"","sources":["../../../src/node/physics/physics-object.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport Matter, { IChamferableBodyDefinition } from 'matter-js'\nimport { Collider, ColliderType } from '../../collision/colliders'\nimport { GameNode } from '../core/game-node'\nimport { PixiContainerNode } from '../core/pixi-container-node'\nimport { LocalTransform } from '../core/transform'\nimport { isTransformableNode } from '../core/transformable-node'\nimport { PhysicsWorld } from './physics-world'\n\nexport type PhysicsObjectOptions = {\n  collider: Collider\n  x?: number\n  y?: number\n}\n\nexport class PhysicsObject<E extends EventMap = EventMap> extends PixiContainerNode<E> {\n  #localTransform = new LocalTransform()\n  #matterBody: Matter.Body\n\n  constructor(options: PhysicsObjectOptions) {\n    super()\n\n    const x = options.x ?? 0\n    const y = options.y ?? 0\n    const c = options.collider\n\n    const bodyOptions: IChamferableBodyDefinition = {\n    }\n\n    if (c.type === ColliderType.Rectangle) {\n      this.#matterBody = Matter.Bodies.rectangle(x, y, c.width, c.height, bodyOptions)\n    } else if (c.type === ColliderType.Circle) {\n      this.#matterBody = Matter.Bodies.circle(x, y, c.radius, bodyOptions)\n    } else if (c.type === ColliderType.Polygon) {\n      this.#matterBody = Matter.Bodies.fromVertices(x, y, [c.vertices], bodyOptions)\n    } else {\n      throw new Error('Invalid collider type')\n    }\n  }\n\n  override set parent(parent: GameNode<EventMap> | undefined) {\n    if (!(parent instanceof PhysicsWorld)) {\n      const actual = parent === undefined\n        ? 'undefined'\n        : parent.constructor?.name ?? typeof parent\n      throw new Error(`PhysicsObject parent must be PhysicsWorld, but got ${actual}`)\n    }\n    super.parent = parent\n  }\n\n  override get parent() {\n    return super.parent\n  }\n\n  protected override update(dt: number) {\n    super.update(dt)\n\n    const mb = this.#matterBody\n\n    const pc = this._pixiContainer\n    pc.position.set(mb.position.x, mb.position.y)\n    pc.rotation = mb.angle\n\n    const lt = this.#localTransform\n    lt.x = mb.position.x\n    lt.y = mb.position.y\n    lt.rotation = mb.angle\n\n    const parent = this.parent\n    if (parent && isTransformableNode(parent)) {\n      this.worldTransform.update(parent.worldTransform, lt)\n    }\n  }\n\n  set x(v) { Matter.Body.setPosition(this.#matterBody, { x: v, y: this.#matterBody.position.y }) }\n  get x() { return this.#matterBody.position.x }\n\n  set y(v) { Matter.Body.setPosition(this.#matterBody, { x: this.#matterBody.position.x, y: v }) }\n  get y() { return this.#matterBody.position.y }\n}\n"]}