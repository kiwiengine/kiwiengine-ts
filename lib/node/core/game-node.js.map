{"version":3,"file":"game-node.js","sourceRoot":"","sources":["../../../src/node/core/game-node.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAY,MAAM,wBAAwB,CAAA;AAG/D,MAAM,OAAgB,QAAwC,SAAQ,YAAe;IACnF,SAAS,CAAW;IACpB,OAAO,CAAW;IAClB,SAAS,GAAe,EAAE,CAAC;IAE3B,IAAc,QAAQ,CAAC,QAA8B;QACnD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC3B,CAAC;IACH,CAAC;IAED,IAAc,QAAQ;QACpB,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED,IAAc,MAAM,CAAC,MAA4B;QAC/C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;IACvB,CAAC;IAED,IAAc,MAAM;QAClB,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,GAAG,CAAC,GAAG,QAAoB;QACzB,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAE7B,cAAc;YACd,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;gBAClD,IAAI,GAAG,KAAK,CAAC,CAAC;oBAAE,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YACxD,CAAC;YAED,YAAY;YACZ,KAAK,CAAC,MAAM,GAAG,IAAI,CAAA;YACnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAE1B,SAAS;YACT,IAAI,IAAI,CAAC,SAAS;gBAAE,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAA;QACrD,CAAC;IACH,CAAC;IAED,MAAM;QACJ,KAAK,CAAC,MAAM,EAAE,CAAA;QAEd,WAAW;QACX,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAChD,IAAI,GAAG,KAAK,CAAC,CAAC;gBAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YACrD,IAAI,CAAC,OAAO,GAAG,SAAS,CAAA;QAC1B,CAAC;QAED,WAAW;QACX,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAA;YACxB,KAAK,CAAC,MAAM,EAAE,CAAA;QAChB,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAA;IAC3B,CAAC;IAES,MAAM,CAAC,SAAiB;QAChC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;QACzB,CAAC;IACH,CAAC;CACF","sourcesContent":["import { EventEmitter, EventMap } from '@webtaku/event-emitter'\nimport { Renderer } from '../../renderer/renderer'\n\nexport abstract class GameNode<E extends EventMap = EventMap> extends EventEmitter<E> {\n  #renderer?: Renderer\n  #parent?: GameNode\n  #children: GameNode[] = [];\n\n  protected set renderer(renderer: Renderer | undefined) {\n    this.#renderer = renderer\n    for (const child of this.#children) {\n      child.renderer = renderer\n    }\n  }\n\n  protected get renderer() {\n    return this.#renderer\n  }\n\n  protected set parent(parent: GameNode | undefined) {\n    this.#parent = parent\n  }\n\n  protected get parent() {\n    return this.#parent\n  }\n\n  add(...children: GameNode[]) {\n    for (const child of children) {\n\n      // 기존 부모로부터 제거\n      if (child.#parent) {\n        const idx = child.#parent.#children.indexOf(child)\n        if (idx !== -1) child.#parent.#children.splice(idx, 1)\n      }\n\n      // 새로운 부모 설정\n      child.parent = this\n      this.#children.push(child)\n\n      // 렌더러 설정\n      if (this.#renderer) child.renderer = this.#renderer\n    }\n  }\n\n  remove() {\n    super.remove()\n\n    // 부모로부터 제거\n    if (this.#parent) {\n      const idx = this.#parent.#children.indexOf(this)\n      if (idx !== -1) this.#parent.#children.splice(idx, 1)\n      this.#parent = undefined\n    }\n\n    // 자식 노드 제거\n    for (const child of this.#children) {\n      child.parent = undefined\n      child.remove()\n    }\n    this.#children.length = 0\n  }\n\n  protected update(deltaTime: number) {\n    for (const child of this.#children) {\n      child.update(deltaTime)\n    }\n  }\n}\n"]}