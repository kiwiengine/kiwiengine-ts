{"version":3,"file":"renderable-node.js","sourceRoot":"","sources":["../../../src/node/core/renderable-node.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,SAAS,CAAA;AAGpD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAE5C,MAAM,UAAU,gBAAgB,CAAC,CAAU;IASzC,OAAQ,CAAS,CAAC,cAAc,KAAK,SAAS,CAAA;AAChD,CAAC;AAED,MAAM,OAAgB,cAA8C,SAAQ,QAAW;IACrF,SAAS,CAAW;IACpB,cAAc,GAAG,IAAI,aAAa,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAA;IAE9D,cAAc,GAAG,IAAI,cAAc,EAAE,CAAA;IAErC;QACE,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAA;IAClC,CAAC;IAEQ,GAAG,CAAC,GAAG,QAA8B;QAC5C,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAA;QAEtB,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC7B,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;QAC/C,KAAK,CAAC,MAAM,EAAE,CAAA;IAChB,CAAC;IAED,IAAc,QAAQ,CAAC,QAA8B;QACnD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEzB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;YAC3B,CAAC;QACH,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAE,CAAC;YAC5B,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QACzC,CAAC;IACH,CAAC;IAED,IAAc,QAAQ;QACpB,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAA;QAEhC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,KAAK,CAAC,oBAAoB,EAAE,CAAA;YAC9B,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { Container as PixiContainer } from 'pixi.js'\nimport { Renderer } from '../../renderer/renderer'\nimport { DirtyNumber } from './dirty-number'\nimport { GameNode } from './game-node'\nimport { WorldTransform } from './transform'\n\nexport function isRenderableNode(n: unknown): n is {\n  renderer?: Renderer\n  _pixiContainer: PixiContainer\n\n  worldTransform: WorldTransform\n  worldAlpha: DirtyNumber\n\n  _resetTransformDirty: () => void\n} {\n  return (n as any).worldTransform !== undefined\n}\n\nexport abstract class RenderableNode<E extends EventMap = EventMap> extends GameNode<E> {\n  #renderer?: Renderer\n  _pixiContainer = new PixiContainer({ sortableChildren: true })\n\n  worldTransform = new WorldTransform()\n\n  constructor() {\n    super()\n    this.worldTransform.x.v = 0\n    this.worldTransform.y.v = 0\n    this.worldTransform.resetDirty()\n  }\n\n  override add(...children: GameNode<EventMap>[]) {\n    super.add(...children)\n\n    for (const child of children) {\n      if (isRenderableNode(child)) {\n        this._pixiContainer.addChild(child._pixiContainer)\n      }\n    }\n  }\n\n  override remove() {\n    this._pixiContainer.destroy({ children: true })\n    super.remove()\n  }\n\n  protected set renderer(renderer: Renderer | undefined) {\n    this.#renderer = renderer\n\n    for (const child of this.children) {\n      if (isRenderableNode(child)) {\n        child.renderer = renderer\n      }\n    }\n\n    if (this.#layer && renderer) {\n      renderer._addToLayer(this, this.#layer)\n    }\n  }\n\n  protected get renderer() {\n    return this.#renderer\n  }\n\n  _resetTransformDirty() {\n    this.worldTransform.resetDirty()\n\n    for (const child of this.children) {\n      if (isRenderableNode(child)) {\n        child._resetTransformDirty()\n      }\n    }\n  }\n}\n"]}