{"version":3,"file":"pixi-container-node.js","sourceRoot":"","sources":["../../../src/node/core/pixi-container-node.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAA;AACnC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAE5C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAA;AAE1D,MAAM,UAAU,kBAAkB,CAAC,CAAU;IAC3C,OAAQ,CAAsB,CAAC,cAAc,KAAK,SAAS,CAAA;AAC7D,CAAC;AAED,MAAM,OAAgB,iBACpB,SAAQ,QAAW;IAEnB,cAAc,GAAG,IAAI,SAAS,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAA;IAE1D,cAAc,GAAG,IAAI,cAAc,EAAE,CAAA;IAC3B,WAAW,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAA;IAE1C;QACE,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAA;IAClC,CAAC;IAEQ,GAAG,CAAC,GAAG,QAA8B;QAC5C,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAA;QAEtB,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC7B,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC9B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;QAC/C,KAAK,CAAC,MAAM,EAAE,CAAA;IAChB,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAA;QAEhC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,IAAI,mBAAmB,CAAC,KAAK,CAAC;gBAAE,KAAK,CAAC,oBAAoB,EAAE,CAAA;QAC9D,CAAC;IACH,CAAC;CACF","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { Container } from 'pixi.js'\nimport { GameNode } from '../core/game-node'\nimport { HasPixiContainer } from '../core/has-pixi-container'\nimport { DirtyNumber } from './dirty-number'\nimport { WorldTransform } from './transform'\nimport { isTransformableNode } from './transformable-node'\n\nexport function isHasPixiContainer(v: unknown): v is HasPixiContainer {\n  return (v as HasPixiContainer)._pixiContainer !== undefined\n}\n\nexport abstract class PixiContainerNode<E extends EventMap = EventMap>\n  extends GameNode<E>\n  implements HasPixiContainer {\n  _pixiContainer = new Container({ sortableChildren: true })\n\n  worldTransform = new WorldTransform()\n  protected globalAlpha = new DirtyNumber(1)\n\n  constructor() {\n    super()\n    this.worldTransform.x.v = 0\n    this.worldTransform.y.v = 0\n    this.worldTransform.resetDirty()\n  }\n\n  override add(...children: GameNode<EventMap>[]) {\n    super.add(...children)\n\n    for (const child of children) {\n      if (isHasPixiContainer(child)) {\n        this._pixiContainer.addChild(child._pixiContainer)\n      }\n    }\n  }\n\n  override remove() {\n    this._pixiContainer.destroy({ children: true })\n    super.remove()\n  }\n\n  _resetTransformDirty() {\n    this.worldTransform.resetDirty()\n\n    for (const child of this.children) {\n      if (isTransformableNode(child)) child._resetTransformDirty()\n    }\n  }\n}\n"]}