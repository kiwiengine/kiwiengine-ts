{"version":3,"file":"display-node.js","sourceRoot":"","sources":["../../../src/node/core/display-node.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAA;AAC1D,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAA;AAMxD,MAAM,OAAgB,WAAgC,SAAQ,iBAAoB;IAChF,cAAc,CAAW;IACzB,MAAM,CAAS;IAEf,YAAY,aAAwB,EAAE,OAA2B;QAC/D,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,cAAc,GAAG,aAAa,CAAA;QACnC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAA;IAC7B,CAAC;IAED,IAAuB,QAAQ,CAAC,QAA8B;QAC5D,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACzB,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ;YAAE,QAAQ,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;IACtE,CAAC;IAED,IAAuB,QAAQ;QAC7B,OAAO,KAAK,CAAC,QAAQ,CAAA;IACvB,CAAC;IAEQ,GAAG,CAAC,GAAG,QAAoB;QAClC,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAA;QAEtB,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC7B,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC9B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;QAC/C,KAAK,CAAC,MAAM,EAAE,CAAA;IAChB,CAAC;IAES,MAAM,CAAC,SAAiB;QAChC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;QAEvB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAE,CAAC;YAC5B,MAAM;QACR,CAAC;IACH,CAAC;CACF","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { Container } from 'pixi.js'\nimport { Renderer } from '../../renderer/renderer'\nimport { GameNode } from './game-node'\nimport { HasPixiContainer } from './has-pixi-container'\nimport { isHasPixiContainer } from './pixi-container-node'\nimport { TransformableNode } from './transformable-node'\n\nexport type DisplayNodeOptions = {\n  layer?: string\n}\n\nexport abstract class DisplayNode<E extends EventMap> extends TransformableNode<E> implements HasPixiContainer {\n  _pixiContainer: Container\n  #layer?: string\n\n  constructor(pixiContainer: Container, options: DisplayNodeOptions) {\n    super()\n    this._pixiContainer = pixiContainer\n    this.#layer = options.layer\n  }\n\n  protected override set renderer(renderer: Renderer | undefined) {\n    super.renderer = renderer\n    if (this.#layer && renderer) renderer._addToLayer(this, this.#layer)\n  }\n\n  protected override get renderer() {\n    return super.renderer\n  }\n\n  override add(...children: GameNode[]) {\n    super.add(...children)\n\n    for (const child of children) {\n      if (isHasPixiContainer(child)) {\n        this._pixiContainer.addChild(child._pixiContainer)\n      }\n    }\n  }\n\n  override remove() {\n    this._pixiContainer.destroy({ children: true })\n    super.remove()\n  }\n\n  protected update(deltaTime: number): void {\n    super.update(deltaTime)\n\n    const renderer = this.renderer\n    if (this.#layer && renderer) {\n      //TODO\n    }\n  }\n}\n"]}