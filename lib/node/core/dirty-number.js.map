{"version":3,"file":"dirty-number.js","sourceRoot":"","sources":["../../../src/node/core/dirty-number.ts"],"names":[],"mappings":"AAAA,MAAM,OAAO,WAAW;IACtB,MAAM,CAAQ;IACd,QAAQ,CAAS;IAEjB,YAAY,YAAoB;QAC9B,IAAI,CAAC,MAAM,GAAG,YAAY,CAAA;QAC1B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;IACvB,CAAC;IAED,IAAI,KAAK,KAAK,OAAO,IAAI,CAAC,QAAQ,CAAA,CAAC,CAAC;IACpC,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,MAAM,CAAA,CAAC,CAAC;IAE9B,IAAI,CAAC,CAAC,QAAgB;QACpB,IAAI,IAAI,CAAC,MAAM,KAAK,QAAQ;YAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;QAClD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAA;IACxB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;IACvB,CAAC;CACF;AAED,MAAM,OAAO,WAAY,SAAQ,WAAW;IAC1C,IAAI,CAAQ;IACZ,IAAI,CAAQ;IAEZ,YAAY,YAAoB;QAC9B,KAAK,CAAC,YAAY,CAAC,CAAA;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IACpC,CAAC;IAED,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,IAAI,CAAA,CAAC,CAAC;IAC9B,IAAI,GAAG,KAAK,OAAO,IAAI,CAAC,IAAI,CAAA,CAAC,CAAC;IAE9B,IAAa,CAAC,CAAC,QAAgB;QAC7B,IAAI,KAAK,CAAC,CAAC,KAAK,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QAChC,CAAC;QACD,KAAK,CAAC,CAAC,GAAG,QAAQ,CAAA;IACpB,CAAC;IAED,IAAa,CAAC,KAAK,OAAO,KAAK,CAAC,CAAC,CAAA,CAAC,CAAC;CACpC","sourcesContent":["export class DirtyNumber {\n  #value: number\n  #isDirty: boolean\n\n  constructor(initialValue: number) {\n    this.#value = initialValue\n    this.#isDirty = false\n  }\n\n  get dirty() { return this.#isDirty }\n  get v() { return this.#value }\n\n  set v(newValue: number) {\n    if (this.#value !== newValue) this.#isDirty = true\n    this.#value = newValue\n  }\n\n  resetDirty() {\n    this.#isDirty = false\n  }\n}\n\nexport class DirtyRadian extends DirtyNumber {\n  #cos: number\n  #sin: number\n\n  constructor(initialValue: number) {\n    super(initialValue)\n    this.#cos = Math.cos(initialValue)\n    this.#sin = Math.sin(initialValue)\n  }\n\n  get cos() { return this.#cos }\n  get sin() { return this.#sin }\n\n  override set v(newValue: number) {\n    if (super.v !== newValue) {\n      this.#cos = Math.cos(newValue)\n      this.#sin = Math.sin(newValue)\n    }\n    super.v = newValue\n  }\n\n  override get v() { return super.v }\n}\n"]}