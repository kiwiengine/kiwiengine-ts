{"version":3,"file":"renderable.js","sourceRoot":"","sources":["../../../src/node/core/renderable.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAA;AAE5C,MAAM,UAAU,gBAAgB,CAAC,CAAU;IACzC,OAAQ,CAA6C,CAAC,cAAc,KAAK,SAAS,CAAA;AACpF,CAAC;AAED,MAAM,OAAgB,cAA4D,SAAQ,QAAW;IACnG,SAAS,CAAW;IACpB,cAAc,CAAG;IAEjB,cAAc,GAAG,IAAI,cAAc,EAAE,CAAA;IACrC,UAAU,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,CAAA;IAE/B,YAAY,aAAgB;QAC1B,KAAK,EAAE,CAAA;QACP,IAAI,CAAC,cAAc,GAAG,aAAa,CAAA;IACrC,CAAC;IAED,IAAc,QAAQ,CAAC,QAA8B;QACnD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEzB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;YAC3B,CAAC;QACH,CAAC;IACH,CAAC;IAED,IAAc,QAAQ;QACpB,OAAO,IAAI,CAAC,SAAS,CAAA;IACvB,CAAC;IAEQ,GAAG,CAAC,GAAG,QAA8B;QAC5C,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAA;QAEtB,KAAK,MAAM,KAAK,IAAI,QAAQ,EAAE,CAAC;YAC7B,IAAI,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC;gBAC5B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;gBAElD,SAAS;gBACT,IAAI,IAAI,CAAC,SAAS;oBAAE,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAA;YACrD,CAAC;QACH,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAA;QAC/C,KAAK,CAAC,MAAM,EAAE,CAAA;IAChB,CAAC;IAED,qBAAqB;QACnB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClC,IAAI,gBAAgB,CAAC,KAAK,CAAC;gBAAE,KAAK,CAAC,qBAAqB,EAAE,CAAA;QAC5D,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAA;IAClC,CAAC;CACF","sourcesContent":["import { EventMap } from '@webtaku/event-emitter'\nimport { Container as PixiContainer } from 'pixi.js'\nimport { Renderer } from '../../renderer/renderer'\nimport { DirtyNumber } from './dirty-number'\nimport { GameNode } from './game-node'\nimport { WorldTransform } from './transform'\n\nexport function isRenderableNode(v: unknown): v is RenderableNode<PixiContainer, EventMap> {\n  return (v as RenderableNode<PixiContainer, EventMap>).worldTransform !== undefined\n}\n\nexport abstract class RenderableNode<C extends PixiContainer, E extends EventMap> extends GameNode<E> {\n  #renderer?: Renderer\n  _pixiContainer: C\n\n  worldTransform = new WorldTransform()\n  worldAlpha = new DirtyNumber(1)\n\n  constructor(pixiContainer: C) {\n    super()\n    this._pixiContainer = pixiContainer\n  }\n\n  protected set renderer(renderer: Renderer | undefined) {\n    this.#renderer = renderer\n\n    for (const child of this.children) {\n      if (isRenderableNode(child)) {\n        child.renderer = renderer\n      }\n    }\n  }\n\n  protected get renderer() {\n    return this.#renderer\n  }\n\n  override add(...children: GameNode<EventMap>[]) {\n    super.add(...children)\n\n    for (const child of children) {\n      if (isRenderableNode(child)) {\n        this._pixiContainer.addChild(child._pixiContainer)\n\n        // 렌더러 설정\n        if (this.#renderer) child.renderer = this.#renderer\n      }\n    }\n  }\n\n  override remove() {\n    this._pixiContainer.destroy({ children: true })\n    super.remove()\n  }\n\n  _updateWorldTransform() {\n    for (const child of this.children) {\n      if (isRenderableNode(child)) child._updateWorldTransform()\n    }\n    this.worldTransform.resetDirty()\n  }\n}\n"]}