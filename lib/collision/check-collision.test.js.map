{"version":3,"file":"check-collision.test.js","sourceRoot":"","sources":["../../src/collision/check-collision.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { GlobalTransform } from '../node/core/transform'\nimport { checkCollision } from './check-collision'\nimport {\n  CircleCollider,\n  ColliderType, EllipseCollider, Point, PolygonCollider, RectangleCollider\n} from './colliders'\n\n// ===== Local type alias to match the engine ========================================================\ntype Transform = GlobalTransform\n\n// ===== Builders ====================================================================================\nconst rad = (deg: number) => (deg * Math.PI) / 180\n\nfunction T(x = 0, y = 0, rotDeg = 0, sx = 1, sy = 1): Transform {\n  const v = rad(rotDeg)\n  return {\n    x: { v: x },\n    y: { v: y },\n    scaleX: { v: sx },\n    scaleY: { v: sy },\n    rotation: { v, sin: Math.sin(v), cos: Math.cos(v) },\n  } as unknown as Transform\n}\n\nfunction R(width: number, height: number, ox = 0, oy = 0): RectangleCollider {\n  return { type: ColliderType.Rectangle, width, height, x: ox, y: oy } as RectangleCollider\n}\nfunction C(radius: number, ox = 0, oy = 0): CircleCollider {\n  return { type: ColliderType.Circle, radius, x: ox, y: oy } as CircleCollider\n}\nfunction E(width: number, height: number, ox = 0, oy = 0): EllipseCollider {\n  return { type: ColliderType.Ellipse, width, height, x: ox, y: oy } as EllipseCollider\n}\nfunction P(points: Array<[number, number]>): PolygonCollider {\n  const vertices: Point[] = points.map(([x, y]) => ({ x, y }))\n  return { type: ColliderType.Polygon, vertices } as PolygonCollider\n}\n\n// ===== RNG & helpers ===============================================================================\nlet _seed = 0x9e3779b9 | 0\nconst setSeed = (s: number) => (_seed = s | 0)\nconst rnd = () => {\n  let x = _seed | 0; x ^= x << 13; x ^= x >>> 17; x ^= x << 5; _seed = x | 0; return (x >>> 0) / 4294967296\n}\nconst rrange = (a: number, b: number) => a + (b - a) * rnd()\nconst rint = (a: number, b: number) => Math.floor(rrange(a, b + 1))\n\nconst translateT = (t: Transform, dx: number, dy: number): Transform =>\n  T(t.x.v + dx, t.y.v + dy, (t.rotation.v * 180) / Math.PI, t.scaleX.v, t.scaleY.v)\n\nconst rotatePoint = (x: number, y: number, theta: number): [number, number] => [\n  Math.cos(theta) * x - Math.sin(theta) * y,\n  Math.sin(theta) * x + Math.cos(theta) * y\n]\n\nconst rigidRotateT = (t: Transform, deltaDeg: number): Transform => {\n  const theta = rad(deltaDeg)\n  const [nx, ny] = rotatePoint(t.x.v, t.y.v, theta)\n  const newRotDeg = (t.rotation.v * 180) / Math.PI + deltaDeg\n  return T(nx, ny, newRotDeg, t.scaleX.v, t.scaleY.v)\n}\n\n// ---- Polygons live in world space; move/rotate vertices directly (Transform is ignored).\nfunction shiftPoly(poly: PolygonCollider, dx: number, dy: number): PolygonCollider {\n  return {\n    ...poly,\n    vertices: poly.vertices.map(p => ({ x: p.x + dx, y: p.y + dy })),\n  }\n}\nfunction rotatePoly(poly: PolygonCollider, deg: number): PolygonCollider {\n  const th = rad(deg), c = Math.cos(th), s = Math.sin(th)\n  return {\n    ...poly,\n    vertices: poly.vertices.map(p => ({ x: c * p.x - s * p.y, y: s * p.x + c * p.y })),\n  }\n}\n\n// Apply transforms per-shape for property tests\nfunction applyTranslation(\n  col: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider,\n  t: Transform,\n  dx: number, dy: number\n): [typeof col, Transform] {\n  if (col.type === ColliderType.Polygon) return [shiftPoly(col, dx, dy), t]\n  return [col, translateT(t, dx, dy)]\n}\nfunction applyRotation(\n  col: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider,\n  t: Transform,\n  deg: number\n): [typeof col, Transform] {\n  if (col.type === ColliderType.Polygon) return [rotatePoly(col, deg), t]\n  return [col, rigidRotateT(t, deg)]\n}\n\n// ---- Stability checks to avoid near-tangency numerical flicker -----------------------------------\nfunction isStablePair(\n  a: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider, ta: Transform,\n  b: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider, tb: Transform\n) {\n  const base = checkCollision(a, ta, b, tb)\n  const eps = 1e-6\n  const dirs: Array<[number, number]> = [[eps, -eps], [-eps, eps], [eps, eps], [-eps, -eps]]\n  for (const [dx, dy] of dirs) {\n    const [a2, ta2] = applyTranslation(a, ta, dx, dy)\n    const [b2, tb2] = applyTranslation(b, tb, -dx, -dy)\n    const j = checkCollision(a2, ta2, b2, tb2)\n    if (j !== base) return false\n  }\n  return true\n}\n\nfunction isRotationStablePair(\n  a: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider, ta: Transform,\n  b: CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider, tb: Transform,\n  deltaDeg: number\n) {\n  const [aR, taR] = applyRotation(a, ta, deltaDeg)\n  const [bR, tbR] = applyRotation(b, tb, deltaDeg)\n  const baseRot = checkCollision(aR, taR, bR, tbR)\n\n  // small rotation jitter — use a slightly larger epsilon to catch GJK flips\n  const epsDeg = 1e-3\n  const [aR1, taR1] = applyRotation(a, ta, deltaDeg + epsDeg)\n  const [bR1, tbR1] = applyRotation(b, tb, deltaDeg + epsDeg)\n  const [aR2, taR2] = applyRotation(a, ta, deltaDeg - epsDeg)\n  const [bR2, tbR2] = applyRotation(b, tb, deltaDeg - epsDeg)\n  const r1 = checkCollision(aR1, taR1, bR1, tbR1)\n  const r2 = checkCollision(aR2, taR2, bR2, tbR2)\n  if (r1 !== baseRot || r2 !== baseRot) return false\n\n  // small translation jitter after rotation\n  const eps = 1e-5\n  const [aRt1, taRt1] = applyTranslation(aR, taR, eps, -eps)\n  const [bRt1, tbRt1] = applyTranslation(bR, tbR, -eps, eps)\n  const [aRt2, taRt2] = applyTranslation(aR, taR, -eps, eps)\n  const [bRt2, tbRt2] = applyTranslation(bR, tbR, eps, -eps)\n  const t1 = checkCollision(aRt1, taRt1, bRt1, tbRt1)\n  const t2 = checkCollision(aRt2, taRt2, bRt2, tbRt2)\n  return t1 === baseRot && t2 === baseRot\n}\n\nconst randomConvexPoly = (n: number, radius = 2, jitter = 0.5): PolygonCollider => {\n  const pts: Array<[number, number]> = []\n  for (let i = 0; i < n; i++) {\n    const a = (i + rnd() * 0.1) * (2 * Math.PI / n)\n    const r = radius * (1 - jitter / 2 + jitter * rnd())\n    pts.push([r * Math.cos(a), r * Math.sin(a)])\n  }\n  pts.sort((p, q) => Math.atan2(p[1], p[0]) - Math.atan2(q[1], q[0]))\n  return P(pts)\n}\n\nfunction randomColliderAndTransform(): [CircleCollider | RectangleCollider | EllipseCollider | PolygonCollider, Transform] {\n  switch (rint(0, 3)) {\n    case 0: return [R(rrange(0.2, 4.0), rrange(0.2, 4.0)), randomTransform()]\n    case 1: return [C(rrange(0.2, 2.5)), randomTransform()]\n    case 2: return [E(rrange(0.4, 5.0), rrange(0.4, 5.0)), randomTransform()]\n    default: return [randomConvexPoly(rint(3, 7)), randomTransform()]\n  }\n}\nfunction randomTransform(): Transform {\n  return T(\n    rrange(-5, 5),\n    rrange(-5, 5),\n    rrange(-180, 180),\n    rrange(0.5, 2.0) * (rnd() < 0.05 ? -1 : 1),\n    rrange(0.5, 2.0) * (rnd() < 0.05 ? -1 : 1),\n  )\n}\n\n// Invariance test should not be affected by anisotropic/negative scales.\nfunction normalizeForRigid(t: Transform): Transform {\n  return T(t.x.v, t.y.v, (t.rotation.v * 180) / Math.PI, 1, 1)\n}\nconst isEllipse = (col: any): boolean => col.type === ColliderType.Ellipse\n\n// Utility wrappers that also check symmetry implicitly\nfunction expectCollide(a: any, ta: Transform, b: any, tb: Transform, hint?: string) {\n  const ab = checkCollision(a, ta, b, tb)\n  const ba = checkCollision(b, tb, a, ta)\n  if (!(ab && ba)) throw new Error(hint ?? `expected collision but got ab=${ab}, ba=${ba}`)\n}\nfunction expectSeparate(a: any, ta: Transform, b: any, tb: Transform, hint?: string) {\n  const ab = checkCollision(a, ta, b, tb)\n  const ba = checkCollision(b, tb, a, ta)\n  if (ab || ba) throw new Error(hint ?? `expected separation but got ab=${ab}, ba=${ba}`)\n}\n\n// ===== TESTS =======================================================================================\n\ndescribe('Rect-Rect (AABB fast path)', () => {\n  it('overlap', () => {\n    expectCollide(R(2, 2), T(0, 0), R(2, 2), T(1, 0))\n  })\n  it('touching edge inclusive', () => {\n    expectCollide(R(2, 2), T(0, 0), R(2, 2), T(2, 0))\n  })\n  it('separated', () => {\n    expectSeparate(R(2, 2), T(0, 0), R(2, 2), T(2.01, 0))\n  })\n})\n\ndescribe('Rect-Rect (rotated, SAT path)', () => {\n  it('overlap (same center)', () => {\n    expectCollide(R(2, 2), T(0, 0, 45), R(2, 2), T(0, 0, -30))\n  })\n  it('separated', () => {\n    expectSeparate(R(2, 1), T(0, 0, 37), R(1.2, 2.4), T(4, 0, -20))\n  })\n})\n\ndescribe('Circle-Circle', () => {\n  it('overlap', () => {\n    expectCollide(C(1), T(0, 0), C(1), T(1.5, 0))\n  })\n  it('touching inclusive', () => {\n    expectCollide(C(1), T(0, 0), C(1), T(2, 0))\n  })\n  it('separated', () => {\n    expectSeparate(C(1), T(0, 0), C(1), T(2.01, 0))\n  })\n})\n\ndescribe('Circle scaling anisotropy (conservative)', () => {\n  it('still overlap when max scale enlarges radius', () => {\n    expectCollide(C(1), T(0, 0, 0, 2, 0.5), C(1), T(2.9, 0))\n  })\n  it('separated beyond conservative sum', () => {\n    expectSeparate(C(1), T(0, 0, 0, 2, 0.5), C(1), T(4.01, 0))\n  })\n})\n\ndescribe('Rect-Circle', () => {\n  it('overlap', () => {\n    expectCollide(R(2, 2), T(0, 0), C(1), T(1.2, 0))\n  })\n  it('touching inclusive', () => {\n    expectCollide(R(2, 2), T(0, 0), C(1), T(2, 0))\n  })\n  it('separated', () => {\n    expectSeparate(R(2, 2), T(0, 0), C(1), T(2.01, 0))\n  })\n})\n\ndescribe('Poly-Poly (convex)', () => {\n  const square = P([[-1, -1], [1, -1], [1, 1], [-1, 1]])\n  it('overlap', () => {\n    expectCollide(square, T(0, 0), square, T(1, 0))\n  })\n  it('separated', () => {\n    const moved = P(square.vertices.map(p => [p.x + 2.1, p.y]))\n    expectSeparate(square, T(0, 0), moved, T(0, 0))\n  })\n})\n\ndescribe('Poly-Circle', () => {\n  it('edge touching inclusive', () => {\n    const poly = P([[-1, -1], [1, -1], [1, 1], [-1, 1]])\n    expectCollide(poly, T(0, 0), C(1), T(2, 0))\n  })\n})\n\ndescribe('Poly-Rect', () => {\n  it('overlap with rotated rect', () => {\n    expectCollide(P([[-2, -1], [2, -1], [2, 1], [-2, 1]]), T(0, 0), R(1.5, 1.5), T(1.6, 0, 30))\n  })\n  it('separated gap', () => {\n    expectSeparate(P([[-1, -1], [1, -1], [1, 1], [-1, 1]]), T(0, 0), R(1, 1), T(2.05, 0, 15))\n  })\n})\n\ndescribe('Ellipse interactions (GJK)', () => {\n  it('Ellipse-Rect overlap axis-aligned', () => {\n    // rx=2 + rect.hx=0.5 → boundary=2.5; pick 2.2 for stable overlap\n    expectCollide(E(4, 2), T(0, 0), R(1, 1), T(2.2, 0))\n  })\n  it('Ellipse-Rect separated axis-aligned', () => {\n    expectSeparate(E(4, 2), T(0, 0), R(1, 1), T(3.6, 0))\n  })\n  it('Ellipse-Rect overlap rotated both', () => {\n    expectCollide(E(6, 2), T(0, 0, 25), R(2, 3), T(2.2, 0.5, -35))\n  })\n  it('Ellipse-Circle touching-ish (use slight overlap)', () => {\n    expectCollide(E(4, 2), T(0, 0), C(1), T(2.99, 0))\n  })\n  it('Ellipse-Circle separated', () => {\n    expectSeparate(E(4, 2), T(0, 0), C(1), T(3.05, 0))\n  })\n  it('Ellipse-Ellipse overlap axis-aligned', () => {\n    expectCollide(E(4, 2), T(0, 0), E(6, 2), T(4.7, 0))\n  })\n  it('Ellipse-Ellipse near-touching vs separated (robust)', () => {\n    expectCollide(E(4, 2), T(0, 0), E(6, 2), T(4.999, 0))\n    expectSeparate(E(4, 2), T(0, 0), E(6, 2), T(5.001, 0))\n  })\n})\n\ndescribe('Degenerate/edge sanity', () => {\n  it('Zero-radius circles coincident centers collide', () => {\n    expectCollide(C(0), T(1, 2), C(0), T(1, 2))\n  })\n  it('Zero-radius circle vs rectangle far separated', () => {\n    expectSeparate(C(0), T(10, 0), R(2, 2), T(0, 0))\n  })\n})\n\n// ===== Properties ==================================================================================\n\ndescribe('Properties', () => {\n  it('symmetry over random pairs', () => {\n    setSeed(0xc0ffee)\n    const N = 300\n    for (let i = 0; i < N; i++) {\n      const [a, ta] = randomColliderAndTransform()\n      const [b, tb] = randomColliderAndTransform()\n      const ab = checkCollision(a, ta, b, tb)\n      const ba = checkCollision(b, tb, a, ta)\n      if (ab !== ba) throw new Error(`symmetry failed at i=${i}`)\n    }\n  })\n\n  it('translation invariance', () => {\n    setSeed(0xbadc0de)\n    const N = 200\n    for (let i = 0; i < N; i++) {\n      const [a, ta] = randomColliderAndTransform()\n      const [b, tb] = randomColliderAndTransform()\n      const base = checkCollision(a, ta, b, tb)\n      const dx = rrange(-5, 5), dy = rrange(-5, 5)\n\n      const [a2, ta2] = applyTranslation(a, ta, dx, dy)\n      const [b2, tb2] = applyTranslation(b, tb, dx, dy)\n\n      const moved = checkCollision(a2, ta2, b2, tb2)\n      if (base !== moved) throw new Error(`translation invariance failed at i=${i}`)\n    }\n  })\n\n  it('rigid rotation invariance (about origin)', () => {\n    setSeed(0xfeedface)\n    const N = 200\n    for (let i = 0; i < N; i++) {\n      const [a0, ta0] = randomColliderAndTransform()\n      const [b0, tb0] = randomColliderAndTransform()\n\n      // Remove anisotropic/negative scaling effect for the invariance test.\n      const ta = normalizeForRigid(ta0)\n      const tb = normalizeForRigid(tb0)\n\n      // Skip near-tangency base pairs.\n      if (!isStablePair(a0, ta, b0, tb)) continue\n\n      // IMPORTANT: skip ellipses here — GJK can flip at razor edges even after jitter checks.\n      if (isEllipse(a0) || isEllipse(b0)) continue\n\n      const base = checkCollision(a0, ta, b0, tb)\n      const deltaDeg = rrange(-180, 180)\n\n      // If the rotated result flickers under tiny perturbations, skip as unstable.\n      if (!isRotationStablePair(a0, ta, b0, tb, deltaDeg)) continue\n\n      const [a2, ta2] = applyRotation(a0, ta, deltaDeg)\n      const [b2, tb2] = applyRotation(b0, tb, deltaDeg)\n      const rotated = checkCollision(a2, ta2, b2, tb2)\n      if (base !== rotated) throw new Error(`rotation invariance failed at i=${i}`)\n    }\n  })\n})\n"]}