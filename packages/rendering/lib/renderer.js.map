{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACxD,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,UAAU,EAAqC,gBAAgB,EAAE,MAAM,SAAS,CAAA;AAExH,MAAM,OAAO,QAAQ;IACV,OAAO,CAAS;IAChB,gBAAgB,CAAiB;IAE1C,aAAa,CAAe;IACnB,KAAK,GAAG,IAAI,SAAS,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAA;IACjD,WAAW,GAAG,IAAI,GAAG,EAAqB,CAAA;IAEnD,YACE,MAAe,EACf,eAAgC;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAA;QACvC,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,aAAa,GAAG,MAAM,kBAAkB,CAAC;YAC5C,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,MAAM,GAAG,CAAC,CAAA;YACd,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,KAAK,IAAI;oBAAE,OAAM;gBAEtB,MAAM,EAAE,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAA;gBACvB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;gBAC1C,IAAI,SAAS,EAAE,CAAC;oBACd,SAAS,CAAC,MAAM,GAAG,MAAM,CAAA;gBAC3B,CAAC;qBAAM,CAAC;oBACN,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAA;oBACjC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;oBACnC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;oBAC9B,SAAS,CAAC,MAAM,GAAG,MAAM,CAAA;gBAC3B,CAAC;gBACD,MAAM,EAAE,CAAA;YACV,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACvC,CAAC;IACH,CAAC;CACF;AAED,MAAM,OAAO,iBAAkB,SAAQ,QAAQ;IAC7C,YAAY,MAAe,EAAE,eAAgC;QAC3D,UAAU,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;QAChC,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,CAAA;IAChC,CAAC;CACF","sourcesContent":["import { ObjectStateTree, ROOT } from '@kiwiengine/core'\nimport { autoDetectRenderer, Container, DOMAdapter, ICanvas, Renderer as PixiRenderer, WebWorkerAdapter } from 'pixi.js'\n\nexport class Renderer {\n  readonly #canvas: ICanvas\n  readonly #objectStateTree: ObjectStateTree\n\n  #pixiRenderer?: PixiRenderer\n  readonly #root = new Container({ sortableChildren: true })\n  readonly #containers = new Map<string, Container>()\n\n  constructor(\n    canvas: ICanvas,\n    objectStateTree: ObjectStateTree,\n  ) {\n    this.#canvas = canvas\n    this.#objectStateTree = objectStateTree\n    this.#init()\n  }\n\n  async #init() {\n    this.#pixiRenderer = await autoDetectRenderer({\n      canvas: this.#canvas,\n    })\n  }\n\n  render() {\n    if (this.#pixiRenderer) {\n      let zIndex = 0\n      this.#objectStateTree.forEach((i) => {\n        if (i === ROOT) return\n\n        const id = i.toString()\n        const container = this.#containers.get(id)\n        if (container) {\n          container.zIndex = zIndex\n        } else {\n          const container = new Container()\n          this.#containers.set(id, container)\n          this.#root.addChild(container)\n          container.zIndex = zIndex\n        }\n        zIndex++\n      })\n      this.#pixiRenderer.render(this.#root)\n    }\n  }\n}\n\nexport class WebWorkerRenderer extends Renderer {\n  constructor(canvas: ICanvas, objectStateTree: ObjectStateTree) {\n    DOMAdapter.set(WebWorkerAdapter)\n    super(canvas, objectStateTree)\n  }\n}"]}