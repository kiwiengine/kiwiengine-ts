{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACxD,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,UAAU,EAAqC,gBAAgB,EAAE,MAAM,SAAS,CAAA;AAExH,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,CAAA;AAElC,MAAM,OAAO,QAAQ;IACV,OAAO,CAAS;IAChB,gBAAgB,CAAiB;IAE1C,aAAa,CAAe;IACnB,KAAK,GAAG,IAAI,SAAS,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAA;IACjD,WAAW,GAAG,IAAI,GAAG,EAAqB,CAAA;IACnD,WAAW,GAAG,CAAC,CAAA;IAEf,YACE,MAAe,EACf,eAAgC;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAA;QACvC,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IAED,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,aAAa,GAAG,MAAM,kBAAkB,CAAC;YAC5C,MAAM,EAAE,IAAI,CAAC,OAAO;SACrB,CAAC,CAAA;IACJ,CAAC;IAED,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAA;QACnC,IAAI,CAAC,QAAQ;YAAE,OAAM;QAErB,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC,WAAW,CAAA;QAC9B,IAAI,MAAM,GAAG,CAAC,CAAA;QAEd,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YACnC,IAAI,EAAE,KAAK,IAAI;gBAAE,OAAM;YAEvB,IAAI,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;YACxC,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,SAAS,GAAG,IAAI,SAAS,EAAE,CAAA;gBAC3B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;gBACnC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;YAChC,CAAC;YAED,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC5C,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;YAC5C,SAAS,CAAC,MAAM,GAAG,MAAM,EAAE,CAAA;YAC1B,SAAiB,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAA;QACpC,CAAC,CAAC,CAAA;QAEF,KAAK,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YAC/C,IAAK,SAAiB,CAAC,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;gBACzC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;gBACjC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAC7B,CAAC;QACH,CAAC;QAED,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC7B,CAAC;CACF;AAED,MAAM,OAAO,iBAAkB,SAAQ,QAAQ;IAC7C,YAAY,MAAe,EAAE,eAAgC;QAC3D,UAAU,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;QAChC,KAAK,CAAC,MAAM,EAAE,eAAe,CAAC,CAAA;IAChC,CAAC;CACF","sourcesContent":["import { ObjectStateTree, ROOT } from '@kiwiengine/core'\nimport { autoDetectRenderer, Container, DOMAdapter, ICanvas, Renderer as PixiRenderer, WebWorkerAdapter } from 'pixi.js'\n\nconst SEEN_GEN = Symbol('seenGen')\n\nexport class Renderer {\n  readonly #canvas: ICanvas\n  readonly #objectStateTree: ObjectStateTree\n\n  #pixiRenderer?: PixiRenderer\n  readonly #root = new Container({ sortableChildren: true })\n  readonly #containers = new Map<number, Container>()\n  #generation = 0\n\n  constructor(\n    canvas: ICanvas,\n    objectStateTree: ObjectStateTree,\n  ) {\n    this.#canvas = canvas\n    this.#objectStateTree = objectStateTree\n    this.#init()\n  }\n\n  async #init() {\n    this.#pixiRenderer = await autoDetectRenderer({\n      canvas: this.#canvas,\n    })\n  }\n\n  render() {\n    const renderer = this.#pixiRenderer\n    if (!renderer) return\n\n    const gen = ++this.#generation\n    let zIndex = 0\n\n    this.#objectStateTree.forEach((id) => {\n      if (id === ROOT) return\n\n      let container = this.#containers.get(id)\n      if (!container) {\n        container = new Container()\n        this.#containers.set(id, container)\n        this.#root.addChild(container)\n      }\n\n      container.x = this.#objectStateTree.getX(id)\n      container.y = this.#objectStateTree.getY(id)\n      container.zIndex = zIndex++\n      (container as any)[SEEN_GEN] = gen\n    })\n\n    for (const [id, container] of this.#containers) {\n      if ((container as any)[SEEN_GEN] !== gen) {\n        this.#root.removeChild(container)\n        this.#containers.delete(id)\n      }\n    }\n\n    renderer.render(this.#root)\n  }\n}\n\nexport class WebWorkerRenderer extends Renderer {\n  constructor(canvas: ICanvas, objectStateTree: ObjectStateTree) {\n    DOMAdapter.set(WebWorkerAdapter)\n    super(canvas, objectStateTree)\n  }\n}\n"]}