{"version":3,"file":"value-array.js","sourceRoot":"","sources":["../../src/sab-data-structures/value-array.ts"],"names":[],"mappings":"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","sourcesContent":["export class SABFloat32ValueArray {\n  readonly #values: Float32Array\n  readonly #stride: number\n\n  constructor(\n    sab: SharedArrayBuffer,\n    byteOffset: number,\n    capacity: number,\n    valueCount: number,\n  ) {\n    this.#stride = valueCount\n    this.#values = new Float32Array(sab, byteOffset, capacity * valueCount)\n  }\n\n  static bytesRequired(capacity: number, valueCount: number): number {\n    return capacity * valueCount * Float32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#values.byteLength }\n\n  #offset(i: number) { return i * this.#stride }\n\n  set(i: number, j: number, v: number) {\n    this.#values[this.#offset(i) + j] = v\n  }\n\n  get(i: number, j: number): number {\n    return this.#values[this.#offset(i) + j]\n  }\n}\n\nexport class SABUint32ValueArray {\n  readonly #values: Uint32Array\n  readonly #stride: number\n\n  constructor(\n    sab: SharedArrayBuffer,\n    byteOffset: number,\n    capacity: number,\n    valueCount: number,\n  ) {\n    this.#stride = valueCount\n    this.#values = new Uint32Array(sab, byteOffset, capacity * valueCount)\n  }\n\n  static bytesRequired(capacity: number, valueCount: number): number {\n    return capacity * valueCount * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#values.byteLength }\n\n  #offset(i: number) { return i * this.#stride }\n\n  set(i: number, j: number, v: number) {\n    this.#values[this.#offset(i) + j] = v\n  }\n\n  get(i: number, j: number): number {\n    return this.#values[this.#offset(i) + j]\n  }\n}\n\nexport class SABBooleanValueArray {\n  readonly #words: Uint32Array\n  readonly #stride: number\n\n  constructor(\n    sab: SharedArrayBuffer,\n    byteOffset: number,\n    capacity: number,\n    valueCount: number,\n  ) {\n    this.#stride = valueCount\n\n    const totalBits = capacity * valueCount\n    const wordCount = Math.ceil(totalBits / 32)\n    this.#words = new Uint32Array(sab, byteOffset, wordCount)\n  }\n\n  static bytesRequired(capacity: number, valueCount: number): number {\n    const totalBits = capacity * valueCount\n    const wordCount = Math.ceil(totalBits / 32)\n    return wordCount * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#words.byteLength }\n\n  #bitIndex(i: number, j: number): number {\n    return (i * this.#stride) + j\n  }\n\n  set(i: number, j: number, v: boolean) {\n    const bitIndex = this.#bitIndex(i, j)\n    const wi = bitIndex >>> 5\n    const mask = 1 << (bitIndex & 31)\n\n    if (v) {\n      this.#words[wi] |= mask\n    } else {\n      this.#words[wi] &= ~mask\n    }\n  }\n\n  get(i: number, j: number): boolean {\n    const bitIndex = this.#bitIndex(i, j)\n    const wi = bitIndex >>> 5\n    const mask = 1 << (bitIndex & 31)\n\n    return (this.#words[wi] & mask) !== 0\n  }\n}\n"]}