{"version":3,"file":"tree-links.js","sourceRoot":"","sources":["../../src/sab-data-structures/tree-links.ts"],"names":[],"mappings":"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","sourcesContent":["export const ROOT = 0 as const\n\nconst NODE_WORDS = 5 as const\nconst PARENT = 0 as const\nconst FIRST = 1 as const\nconst LAST = 2 as const\nconst PREV = 3 as const\nconst NEXT = 4 as const\n\nconst NONE = 0xFFFFFFFF as const\n\nexport class SABTreeLinks {\n  readonly #meta: Uint32Array\n\n  constructor(sab: SharedArrayBuffer, byteOffset: number, capacity: number) {\n    this.#meta = new Uint32Array(sab, byteOffset, capacity * NODE_WORDS)\n  }\n\n  static bytesRequired(capacity: number): number {\n    return capacity * NODE_WORDS * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#meta.byteLength }\n\n  #offset(i: number) { return i * NODE_WORDS }\n  #first(i: number) { return this.#meta[this.#offset(i) + FIRST] }\n  #last(i: number) { return this.#meta[this.#offset(i) + LAST] }\n  #next(i: number) { return this.#meta[this.#offset(i) + NEXT] }\n\n  remove(i: number) {\n    const o = this.#offset(i)\n    const p = this.#meta[o + PARENT]\n    const l = this.#meta[o + PREV]\n    const r = this.#meta[o + NEXT]\n\n    if (p !== NONE) {\n      const po = this.#offset(p)\n      if (this.#meta[po + FIRST] === i) this.#meta[po + FIRST] = r\n      if (this.#meta[po + LAST] === i) this.#meta[po + LAST] = l\n    }\n    if (l !== NONE) this.#meta[this.#offset(l) + NEXT] = r\n    if (r !== NONE) this.#meta[this.#offset(r) + PREV] = l\n  }\n\n  #linkAsOnlyChild(p: number, c: number) {\n    const po = this.#offset(p), co = this.#offset(c)\n    this.#meta[co + PARENT] = p\n    this.#meta[co + PREV] = NONE\n    this.#meta[co + NEXT] = NONE\n    this.#meta[po + FIRST] = c\n    this.#meta[po + LAST] = c\n  }\n\n  #insertAfterSibling(p: number, left: number, c: number) {\n    const lo = this.#offset(left)\n    const right = this.#meta[lo + NEXT]\n    const co = this.#offset(c)\n\n    this.#meta[co + PARENT] = p\n    this.#meta[co + PREV] = left\n    this.#meta[co + NEXT] = right\n\n    this.#meta[lo + NEXT] = c\n    if (right !== NONE) this.#meta[this.#offset(right) + PREV] = c\n    else this.#meta[this.#offset(p) + LAST] = c\n  }\n\n  #insertBeforeSibling(p: number, right: number, c: number) {\n    const ro = this.#offset(right)\n    const left = this.#meta[ro + PREV]\n    const co = this.#offset(c)\n\n    this.#meta[co + PARENT] = p\n    this.#meta[co + NEXT] = right\n    this.#meta[co + PREV] = left\n\n    this.#meta[ro + PREV] = c\n    if (left !== NONE) this.#meta[this.#offset(left) + NEXT] = c\n    else this.#meta[this.#offset(p) + FIRST] = c\n  }\n\n  insert(p: number, c: number) {\n    this.remove(c)\n    const last = this.#last(p)\n    if (last === NONE) this.#linkAsOnlyChild(p, c)\n    else this.#insertAfterSibling(p, last, c)\n  }\n\n  insertAt(p: number, c: number, index: number) {\n    this.remove(c)\n\n    const f = this.#first(p)\n    if (f === NONE) { this.#linkAsOnlyChild(p, c); return }\n\n    if (index <= 0) { this.#insertBeforeSibling(p, f, c); return }\n\n    let i = 0, cur = f\n    while (cur !== NONE && i < index) { cur = this.#next(cur); i++ }\n\n    if (cur === NONE) this.insert(p, c)\n    else this.#insertBeforeSibling(p, cur, c)\n  }\n}\n"]}