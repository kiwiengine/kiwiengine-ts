{"version":3,"file":"tree-links.js","sourceRoot":"","sources":["../../src/sab-data-structures/tree-links.ts"],"names":[],"mappings":"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","sourcesContent":["export const ROOT = 0 as const\n\nconst NODE_WORDS = 5 as const\nconst PARENT = 0 as const\nconst FIRST = 1 as const\nconst LAST = 2 as const\nconst PREV = 3 as const\nconst NEXT = 4 as const\n\nconst NONE = 0xFFFFFFFF as const\n\nexport class SABTreeLinks {\n  readonly #meta: Uint32Array\n\n  constructor(sab: SharedArrayBuffer, byteOffset: number, capacity: number) {\n    this.#meta = new Uint32Array(sab, byteOffset, capacity * NODE_WORDS)\n    this.#meta.fill(NONE)\n  }\n\n  static bytesRequired(capacity: number): number {\n    return capacity * NODE_WORDS * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength() { return this.#meta.byteLength }\n\n  #offset(i: number) { return i * NODE_WORDS }\n  #parent(i: number) { return this.#meta[this.#offset(i) + PARENT] }\n  #first(i: number) { return this.#meta[this.#offset(i) + FIRST] }\n  #last(i: number) { return this.#meta[this.#offset(i) + LAST] }\n  #next(i: number) { return this.#meta[this.#offset(i) + NEXT] }\n\n  remove(i: number) {\n    const o = this.#offset(i)\n    const p = this.#meta[o + PARENT]\n    const l = this.#meta[o + PREV]\n    const r = this.#meta[o + NEXT]\n\n    if (p !== NONE) {\n      const po = this.#offset(p)\n      if (this.#meta[po + FIRST] === i) this.#meta[po + FIRST] = r\n      if (this.#meta[po + LAST] === i) this.#meta[po + LAST] = l\n    }\n    if (l !== NONE) this.#meta[this.#offset(l) + NEXT] = r\n    if (r !== NONE) this.#meta[this.#offset(r) + PREV] = l\n  }\n\n  #linkAsOnlyChild(p: number, c: number) {\n    const po = this.#offset(p), co = this.#offset(c)\n    this.#meta[co + PARENT] = p\n    this.#meta[co + PREV] = NONE\n    this.#meta[co + NEXT] = NONE\n    this.#meta[po + FIRST] = c\n    this.#meta[po + LAST] = c\n  }\n\n  #insertAfterSibling(p: number, left: number, c: number) {\n    const lo = this.#offset(left)\n    const right = this.#meta[lo + NEXT]\n    const co = this.#offset(c)\n\n    this.#meta[co + PARENT] = p\n    this.#meta[co + PREV] = left\n    this.#meta[co + NEXT] = right\n\n    this.#meta[lo + NEXT] = c\n    if (right !== NONE) this.#meta[this.#offset(right) + PREV] = c\n    else this.#meta[this.#offset(p) + LAST] = c\n  }\n\n  #insertBeforeSibling(p: number, right: number, c: number) {\n    const ro = this.#offset(right)\n    const left = this.#meta[ro + PREV]\n    const co = this.#offset(c)\n\n    this.#meta[co + PARENT] = p\n    this.#meta[co + NEXT] = right\n    this.#meta[co + PREV] = left\n\n    this.#meta[ro + PREV] = c\n    if (left !== NONE) this.#meta[this.#offset(left) + NEXT] = c\n    else this.#meta[this.#offset(p) + FIRST] = c\n  }\n\n  insert(p: number, c: number) {\n    this.remove(c)\n    const last = this.#last(p)\n    if (last === NONE) this.#linkAsOnlyChild(p, c)\n    else this.#insertAfterSibling(p, last, c)\n  }\n\n  insertAt(p: number, c: number, index: number) {\n    this.remove(c)\n\n    const f = this.#first(p)\n    if (f === NONE) { this.#linkAsOnlyChild(p, c); return }\n\n    if (index <= 0) { this.#insertBeforeSibling(p, f, c); return }\n\n    let i = 0, cur = f\n    while (cur !== NONE && i < index) { cur = this.#next(cur); i++ }\n\n    if (cur === NONE) this.insert(p, c)\n    else this.#insertBeforeSibling(p, cur, c)\n  }\n\n  forEach(visitor: (node: number) => void): void {\n    let u: number = ROOT\n    while (true) {\n      visitor(u)\n\n      const f = this.#first(u)\n      if (f !== NONE) { u = f; continue }\n\n      while (true) {\n        if (u === ROOT) return\n        const n = this.#next(u)\n        if (n !== NONE) { u = n; break }\n        u = this.#parent(u)\n      }\n    }\n  }\n\n  sortChildren(\n    p: number,\n    getValue: (node: number) => number,\n  ) {\n    let n = 0\n    let head = this.#first(p)\n    while (head !== NONE) { n++; head = this.#next(head) }\n    if (n <= 1) return\n\n    let runSize = 1\n    while (runSize < n) {\n      let mergedHead: number = NONE\n      let mergedTail: number = NONE\n\n      let cur = this.#first(p)\n      while (cur !== NONE) {\n        let left = cur\n        let i = 1\n        while (i < runSize && this.#next(cur) !== NONE) { cur = this.#next(cur); i++ }\n\n        let right = this.#next(cur)\n        const afterRightStart = right\n        this.#meta[this.#offset(cur) + NEXT] = NONE\n        if (right !== NONE) this.#meta[this.#offset(right) + PREV] = NONE\n\n        let nextStart = afterRightStart\n        i = 0\n        while (i < runSize && nextStart !== NONE) { nextStart = this.#next(nextStart); i++ }\n\n        if (nextStart !== NONE) {\n          const prev = this.#meta[this.#offset(nextStart) + PREV]\n          if (prev !== NONE) this.#meta[this.#offset(prev) + NEXT] = NONE\n          this.#meta[this.#offset(nextStart) + PREV] = NONE\n        }\n\n        cur = nextStart\n\n        let merged: number = NONE\n        let mergedT: number = NONE\n        let a = left\n        let b = right\n\n        while (a !== NONE || b !== NONE) {\n          let takeFromA = false\n          if (b === NONE) takeFromA = true\n          else if (a === NONE) takeFromA = false\n          else {\n            const ka = getValue(a)\n            const kb = getValue(b)\n            takeFromA = (ka <= kb)\n          }\n\n          const node = takeFromA ? a : b\n          if (takeFromA) a = this.#next(a); else b = this.#next(b)\n\n          const no = this.#offset(node)\n          this.#meta[no + PREV] = mergedT\n          this.#meta[no + NEXT] = NONE\n          this.#meta[no + PARENT] = p\n\n          if (merged === NONE) merged = node\n          else this.#meta[this.#offset(mergedT) + NEXT] = node\n          mergedT = node\n        }\n\n        if (mergedHead === NONE) mergedHead = merged\n        else {\n          this.#meta[this.#offset(mergedTail) + NEXT] = merged\n          this.#meta[this.#offset(merged) + PREV] = mergedTail\n        }\n        mergedTail = mergedT\n      }\n\n      const po = this.#offset(p)\n      this.#meta[po + FIRST] = mergedHead\n      this.#meta[po + LAST] = mergedTail\n\n      runSize <<= 1\n    }\n  }\n}\n"]}