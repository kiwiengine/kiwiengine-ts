{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../src/sab-data-structures/tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { SABNodePool } from './node-pool'\nimport { SABTreeLinks } from './tree-links'\nimport { SABBooleanValueArray, SABFloat32ValueArray, SABUint32ValueArray } from './value-array'\n\nexport class SABTree {\n  readonly #pool: SABNodePool\n  readonly #links: SABTreeLinks\n  readonly #bvalues: SABBooleanValueArray\n  readonly #uvalues: SABUint32ValueArray\n  readonly #fvalues: SABFloat32ValueArray\n\n  constructor(\n    sab: SharedArrayBuffer,\n    capacity: number,\n    bvalueCount: number,\n    uvalueCount: number,\n    fvalueCount: number,\n  ) {\n    this.#pool = new SABNodePool(sab, 0, capacity)\n    let offset = this.#pool.byteLength\n\n    this.#links = new SABTreeLinks(sab, offset, capacity)\n    offset += this.#links.byteLength\n\n    this.#bvalues = new SABBooleanValueArray(sab, offset, capacity, bvalueCount)\n    offset += this.#bvalues.byteLength\n\n    this.#uvalues = new SABUint32ValueArray(sab, offset, capacity, uvalueCount)\n    offset += this.#uvalues.byteLength\n\n    this.#fvalues = new SABFloat32ValueArray(sab, offset, capacity, fvalueCount)\n  }\n\n  static bytesRequired(\n    capacity: number,\n    bvalueCount: number,\n    uvalueCount: number,\n    fvalueCount: number,\n  ): number {\n    const queueBytes = SABNodePool.bytesRequired(capacity)\n    const linksBytes = SABTreeLinks.bytesRequired(capacity)\n    const bvalueBytes = SABBooleanValueArray.bytesRequired(capacity, bvalueCount)\n    const uvalueBytes = SABUint32ValueArray.bytesRequired(capacity, uvalueCount)\n    const fvalueBytes = SABFloat32ValueArray.bytesRequired(capacity, fvalueCount)\n    return queueBytes + linksBytes + bvalueBytes + uvalueBytes + fvalueBytes\n  }\n\n  addChild(p: number): number {\n    const id = this.#pool.alloc()\n    this.#links.insert(p, c)\n    return id\n  }\n\n  remove(i: number) {\n    this.#links.remove(i)\n    this.#pool.free(i)\n  }\n\n  insert(p: number, c: number) { this.#links.insert(p, c) }\n  insertAt(p: number, c: number, index: number) { this.#links.insertAt(p, c, index) }\n\n  setBValue(i: number, j: number, v: boolean) { this.#bvalues.set(i, j, v) }\n  getBValue(i: number, j: number) { return this.#bvalues.get(i, j) }\n\n  setUValue(i: number, j: number, v: number) { this.#uvalues.set(i, j, v) }\n  getUValue(i: number, j: number) { return this.#uvalues.get(i, j) }\n\n  setFValue(i: number, j: number, v: number) { this.#fvalues.set(i, j, v) }\n  getFValue(i: number, j: number) { return this.#fvalues.get(i, j) }\n\n  forEach(visitor: (node: number) => void) {\n    this.#links.forEach(visitor)\n  }\n\n  sortChildren(parent: number, uvalueIndex: number) {\n    this.#links.sortChildren(parent, (i) => this.#uvalues.get(i, uvalueIndex))\n  }\n}\n"]}