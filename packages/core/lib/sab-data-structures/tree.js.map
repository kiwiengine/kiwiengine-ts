{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../src/sab-data-structures/tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAA;AACzC,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAA;AAC3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,eAAe,CAAA;AAEpD,MAAM,OAAO,OAAO;IACT,KAAK,CAAa;IAClB,MAAM,CAAc;IACpB,OAAO,CAAsB;IAEtC,YAAY,GAAsB,EAAE,UAAkB,EAAE,QAAgB;QACtE,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAA;QAC9C,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAA;QAElC,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAA;QACrD,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAA;QAEhC,IAAI,CAAC,OAAO,GAAG,IAAI,oBAAoB,CAAC,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAA;QAC1E,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAA;IACnC,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,UAAkB,EAAE,QAAgB;QACvD,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QACtD,MAAM,UAAU,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QACvD,MAAM,UAAU,GAAG,oBAAoB,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;QAC3E,OAAO,UAAU,GAAG,UAAU,GAAG,UAAU,CAAA;IAC7C,CAAC;IAED,MAAM,CAAC,CAAS;QACd,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACrB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACpB,CAAC;IAED,MAAM,CAAC,CAAS,EAAE,CAAS,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC;IACzD,QAAQ,CAAC,CAAS,EAAE,CAAS,EAAE,KAAa,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAA,CAAC,CAAC;IAEnF,QAAQ,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC;IACvE,QAAQ,CAAC,CAAS,EAAE,CAAS,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA,CAAC,CAAC;CACjE","sourcesContent":["import { SABNodePool } from \"./node-pool\"\nimport { SABTreeLinks } from \"./tree-links\"\nimport { SABFloat32ValueArray } from \"./value-array\"\n\nexport class SABTree {\n  readonly #pool: SABNodePool\n  readonly #links: SABTreeLinks\n  readonly #values: SABFloat32ValueArray\n\n  constructor(sab: SharedArrayBuffer, valueCount: number, capacity: number) {\n    this.#pool = new SABNodePool(sab, 0, capacity)\n    let offset = this.#pool.byteLength\n\n    this.#links = new SABTreeLinks(sab, offset, capacity)\n    offset += this.#links.byteLength\n\n    this.#values = new SABFloat32ValueArray(sab, offset, valueCount, capacity)\n    offset += this.#values.byteLength\n  }\n\n  static bytesRequired(valueCount: number, capacity: number): number {\n    const queueBytes = SABNodePool.bytesRequired(capacity)\n    const linksBytes = SABTreeLinks.bytesRequired(capacity)\n    const valueBytes = SABFloat32ValueArray.bytesRequired(valueCount, capacity)\n    return queueBytes + linksBytes + valueBytes\n  }\n\n  remove(i: number) {\n    this.#links.remove(i)\n    this.#pool.free(i)\n  }\n\n  insert(p: number, c: number) { this.#links.insert(p, c) }\n  insertAt(p: number, c: number, index: number) { this.#links.insertAt(p, c, index) }\n\n  setValue(i: number, j: number, v: number) { this.#values.set(i, j, v) }\n  getValue(i: number, j: number) { return this.#values.get(i, j) }\n}\n"]}