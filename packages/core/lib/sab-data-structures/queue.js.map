{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/sab-data-structures/queue.ts"],"names":[],"mappings":"AAAA,MAAM,SAAS,GAAG,CAAU,CAAA;AAE5B,MAAM,OAAO,cAAc;IAChB,KAAK,CAAa;IAClB,KAAK,CAAa;IAClB,SAAS,CAAQ;IAE1B,YAAY,GAAsB,EAAE,UAAkB,EAAE,QAAgB;QACtE,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,CAAC,CAAA;QACxD,IAAI,CAAC,KAAK,GAAG,IAAI,WAAW,CAC1B,GAAG,EACH,UAAU,GAAG,SAAS,GAAG,WAAW,CAAC,iBAAiB,EACtD,QAAQ,CACT,CAAA;QACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;IAC3B,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,QAAgB;QACnC,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,WAAW,CAAC,iBAAiB,CAAA;IAC/D,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAA;IACtD,CAAC;IAED,OAAO,CAAC,CAAS;QACf,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACxB,MAAM,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAA;QACjC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QACnB,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAA;QACjB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;IACtB,CAAC;IAED,OAAO;QACL,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACxB,MAAM,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,SAAS,CAAA;QACjC,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAA;QACjB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;QACpB,OAAO,GAAG,CAAA;IACZ,CAAC;CACF","sourcesContent":["const CTRL_SIZE = 2 as const\n\nexport class SABUint32Queue {\n  readonly #ctrl: Uint32Array\n  readonly #data: Uint32Array\n  readonly #capacity: number\n\n  constructor(sab: SharedArrayBuffer, byteOffset: number, capacity: number) {\n    this.#ctrl = new Uint32Array(sab, byteOffset, CTRL_SIZE)\n    this.#data = new Uint32Array(\n      sab,\n      byteOffset + CTRL_SIZE * Uint32Array.BYTES_PER_ELEMENT,\n      capacity\n    )\n    this.#capacity = capacity\n  }\n\n  static bytesRequired(capacity: number): number {\n    return (CTRL_SIZE + capacity) * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  get byteLength(): number {\n    return this.#ctrl.byteLength + this.#data.byteLength\n  }\n\n  enqueue(v: number) {\n    let tail = this.#ctrl[1]\n    const idx = tail % this.#capacity\n    this.#data[idx] = v\n    tail = (tail + 1)\n    this.#ctrl[1] = tail\n  }\n\n  dequeue(): number {\n    let head = this.#ctrl[0]\n    const idx = head % this.#capacity\n    const val = this.#data[idx]\n    head = (head + 1)\n    this.#ctrl[0] = head\n    return val\n  }\n}\n"]}