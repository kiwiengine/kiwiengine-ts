{"version":3,"file":"ticker.test.js","sourceRoot":"","sources":["../src/ticker.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* @vitest-environment jsdom */\n\nimport { beforeEach, afterEach, describe, it, expect, vi } from 'vitest'\nimport { createTicker } from './ticker'\n\n/**\n * Test Suite — createTicker (rewritten)\n * -------------------------------------\n * 목표\n *  - 경계값(1/fps)에서의 부동소수 오차로 인한 취약 어서션 제거\n *  - uncapped / capped / long frame / setFixedFps / destroy 전 시나리오 재정의\n *  - 현재 구현에 맞춤: setFixedFps(fps <= 0) => uncapped\n *\n * 테스트 원칙\n *  - \"정확히 경계\"에 맞추지 않음(예: 90ms 대신 91ms 등)\n *  - deltaTime 검증은 expect.closeTo + 느슨한 카운트 검증 혼합\n */\n\n/** ----------------------- Time & RAF harness ----------------------- **/\n\n/** Simulated monotonic clock (ms) */\nlet nowMs = 0\n\n/** RAF callback registry: id -> cb */\nconst rafCallbacks = new Map<number, FrameRequestCallback>()\nlet nextRafId = 1\n\nconst installTimeAndRafMocks = () => {\n  vi.spyOn(performance, 'now').mockImplementation(() => nowMs)\n\n  vi.spyOn(window, 'requestAnimationFrame').mockImplementation((cb: FrameRequestCallback) => {\n    const id = nextRafId++\n    rafCallbacks.set(id, cb)\n    return id\n  })\n\n  vi.spyOn(window, 'cancelAnimationFrame').mockImplementation((id: number) => {\n    rafCallbacks.delete(id)\n  })\n}\n\nconst resetHarness = () => {\n  nowMs = 0\n  rafCallbacks.clear()\n  nextRafId = 1\n}\n\n/**\n * 한 프레임만 진행: 시계를 advanceMs 만큼 전진시키고,\n * 현재 등록된 RAF 콜백들만 실행(콜백 내에서 새로 등록된 것은 다음 step에서 실행)\n */\nconst step = (advanceMs: number) => {\n  nowMs += advanceMs\n  const cbs = [...rafCallbacks.values()]\n  rafCallbacks.clear()\n  for (const cb of cbs) cb(nowMs)\n}\n\n/** 여러 프레임 전진 (helper) */\nconst advance = (totalMs: number, stepMs = 16) => {\n  const n = Math.floor(totalMs / stepMs)\n  for (let i = 0; i < n; i++) step(stepMs)\n  const remain = totalMs - n * stepMs\n  if (remain > 0) step(remain)\n}\n\n/** ----------------------- Lifecycle -------------------------- **/\n\nbeforeEach(() => {\n  resetHarness()\n  vi.restoreAllMocks()\n  installTimeAndRafMocks()\n})\n\nafterEach(() => {\n  vi.restoreAllMocks()\n  resetHarness()\n})\n\n/** ----------------------- Tests ------------------------------ **/\n\ndescribe('uncapped mode', () => {\n  it('calls onTick once per frame with raw deltaTime (seconds)', () => {\n    const spy = vi.fn()\n    const ticker = createTicker({ onTick: spy }) // fps omitted -> uncapped\n\n    step(10) // 0.010\n    step(20) // 0.020\n    step(30) // 0.030\n\n    expect(spy).toHaveBeenCalledTimes(3)\n    expect(spy).toHaveBeenNthCalledWith(1, expect.closeTo(0.010, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(2, expect.closeTo(0.020, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(3, expect.closeTo(0.030, 1e-6))\n\n    ticker.destroy()\n  })\n\n  it('does not call onTick when deltaTime <= 0', () => {\n    const spy = vi.fn()\n    const ticker = createTicker({ onTick: spy })\n\n    step(0)\n    expect(spy).not.toHaveBeenCalled()\n\n    step(5)\n    expect(spy).toHaveBeenCalledTimes(1)\n    expect(spy).toHaveBeenLastCalledWith(expect.closeTo(0.005, 1e-6))\n\n    ticker.destroy()\n  })\n})\n\ndescribe('capped mode (fps > 0)', () => {\n  it('accumulates lag and calls at fixed-step boundaries (avoid exact boundary)', () => {\n    // fps=10 -> fixedStep=0.1s\n    const spy = vi.fn()\n    const ticker = createTicker({ fixedFps: 10, onTick: spy })\n\n    // 40 + 40 = 0.08 -> no call yet\n    step(40)\n    step(40)\n    expect(spy).toHaveBeenCalledTimes(0)\n\n    // +31ms -> 0.11 -> crosses boundary -> one call fixedStep\n    step(31)\n    expect(spy).toHaveBeenCalledTimes(1)\n    expect(spy).toHaveBeenLastCalledWith(expect.closeTo(0.1, 1e-6))\n\n    // lag ≈ 0.11 - 0.1 = 0.01\n    // +91ms -> 0.01 + 0.091 = 0.101 -> crosses again\n    step(91)\n    expect(spy).toHaveBeenCalledTimes(2)\n    expect(spy).toHaveBeenLastCalledWith(expect.closeTo(0.1, 1e-6))\n\n    ticker.destroy()\n  })\n\n  it('long frame (delta >= 2*fixedStep) triggers two calls: fixedStep, then raw delta; then lag resets', () => {\n    // fps=5 -> fixedStep=0.2s, 2*fixedStep=0.4s\n    const spy = vi.fn()\n    const ticker = createTicker({ fixedFps: 5, onTick: spy })\n\n    step(500) // 0.5s (>= 0.4)\n    expect(spy).toHaveBeenCalledTimes(2)\n    expect(spy).toHaveBeenNthCalledWith(1, expect.closeTo(0.2, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(2, expect.closeTo(0.5, 1e-6))\n\n    // 다시 한 번 동일 패턴\n    step(500)\n    expect(spy).toHaveBeenCalledTimes(4)\n    expect(spy).toHaveBeenNthCalledWith(3, expect.closeTo(0.2, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(4, expect.closeTo(0.5, 1e-6))\n\n    ticker.destroy()\n  })\n})\n\ndescribe('setFixedFps runtime transitions', () => {\n  it('uncapped -> capped (fps>0) enforces fixed-step boundaries', () => {\n    const spy = vi.fn()\n    const ticker = createTicker({ onTick: spy }) // uncapped\n\n    step(16)\n    step(20)\n    expect(spy).toHaveBeenCalledTimes(2)\n    expect(spy).toHaveBeenNthCalledWith(1, expect.closeTo(0.016, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(2, expect.closeTo(0.020, 1e-6))\n\n    // switch to 10fps\n    ticker.setFixedFps(10)\n\n    // 40 + 40 = 0.08 -> no call yet\n    step(40)\n    step(40)\n    expect(spy).toHaveBeenCalledTimes(2)\n    // +31ms -> boundary cross -> fixedStep call\n    step(31)\n    expect(spy).toHaveBeenCalledTimes(3)\n    expect(spy).toHaveBeenLastCalledWith(expect.closeTo(0.1, 1e-6))\n\n    ticker.destroy()\n  })\n\n  it('capped -> uncapped by setFixedFps(0 or <=0) returns to raw delta behavior', () => {\n    const spy = vi.fn()\n    const ticker = createTicker({ fixedFps: 10, onTick: spy }) // capped initially\n\n    // make at least one fixed-step call to prove capped first\n    step(101)\n    expect(spy).toHaveBeenCalledTimes(1)\n    expect(spy).toHaveBeenLastCalledWith(expect.closeTo(0.1, 1e-6))\n\n    // switch to uncapped\n    ticker.setFixedFps(0) // <= 0 => uncapped per current implementation\n\n    spy.mockClear()\n    step(16)\n    step(33)\n    expect(spy).toHaveBeenCalledTimes(2)\n    // raw deltas now\n    expect(spy).toHaveBeenNthCalledWith(1, expect.closeTo(0.016, 1e-6))\n    expect(spy).toHaveBeenNthCalledWith(2, expect.closeTo(0.033, 1e-6))\n\n    ticker.destroy()\n  })\n})\n\ndescribe('destroy', () => {\n  it('cancels next RAF and stops future ticks', () => {\n    const spy = vi.fn()\n    const cancelSpy = vi.spyOn(window, 'cancelAnimationFrame')\n\n    const ticker = createTicker({ onTick: spy })\n\n    step(16)\n    expect(spy).toHaveBeenCalledTimes(1)\n\n    ticker.destroy()\n    expect(cancelSpy).toHaveBeenCalled()\n\n    spy.mockClear()\n    advance(200, 16)\n    expect(spy).not.toHaveBeenCalled()\n  })\n})\n\ndescribe('long-running sanity (ragged frames, fps=10)', () => {\n  it('produces a reasonable number of calls; includes fixedStep calls', () => {\n    const spy = vi.fn()\n    const ticker = createTicker({ fixedFps: 10, onTick: spy }) // fixedStep = 0.1\n\n    // 총 1000ms. 몇몇 프레임은 \"긴 프레임\"으로 extra-call 분기 유발\n    const frames = [33, 33, 35, 101, 51, 61, 41, 201, 201, 251] // 경계 회피용 약간의 +1ms\n    for (const ms of frames) step(ms)\n\n    const calls = spy.mock.calls.length\n    // 긴 프레임의 lag 리셋과 라운딩에 따라 정확한 10보다는 다소 흔들릴 수 있음.\n    // 합리적인 범위 내에서 검증(최소 9, 최대 13)\n    expect(calls).toBeGreaterThanOrEqual(9)\n    expect(calls).toBeLessThanOrEqual(13)\n\n    // 적어도 일부 호출은 정확히 0.1의 고정 스텝일 것\n    const hasFixedStep = spy.mock.calls.some(([dt]) => Math.abs((dt as number) - 0.1) < 1e-6)\n    expect(hasFixedStep).toBe(true)\n\n    ticker.destroy()\n  })\n})\n"]}